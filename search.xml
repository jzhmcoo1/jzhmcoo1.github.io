<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flask博客开发记录</title>
      <link href="/2020/06/03/Flask-dev-note/"/>
      <url>/2020/06/03/Flask-dev-note/</url>
      
        <content type="html"><![CDATA[<h1 id="一、项目简介"><a href="#一、项目简介" class="headerlink" title="一、项目简介"></a>一、项目简介</h1><h2 id="1-做了什么？"><a href="#1-做了什么？" class="headerlink" title="1. 做了什么？"></a>1. 做了什么？</h2><ul><li>我做的这个项目是一个基于 flask（一个Python 后端框架） 的博客网站</li></ul><h2 id="2-为什么想到要做这么一个项目？"><a href="#2-为什么想到要做这么一个项目？" class="headerlink" title="2. 为什么想到要做这么一个项目？"></a>2. 为什么想到要做这么一个项目？</h2><ol><li>因为平时有不懂的问题在搜索引擎上进行搜索时，一般跳出来的前几名答案都来自诸如 csdn，博客园，简书等等博客网站的回答，故觉得博客很有用；</li><li>很多大牛都在写自己的博客，比如阮一峰、廖雪峰等，我们写了是不是可以与他们稍稍拉近距离呢？</li><li>我们学习时往往只注重了输入，一味地学习通常会感觉知识点记不住，每次用到时都要去查，我觉得不如能自己写博客，培养自己的总结能力与习惯，当我们有知识的输出时，我们才会对知识记忆和理解得更深刻，这样即使以后忘了，看一眼自己总结过的知识点，回忆起来会想当迅速。</li></ol><h2 id="3-如何实现或者有哪些解决方案？"><a href="#3-如何实现或者有哪些解决方案？" class="headerlink" title="3. 如何实现或者有哪些解决方案？"></a>3. 如何实现或者有哪些解决方案？</h2><ul><li>最方便的当然是去各大知名博客网站，在那里进行写作，这是最轻松方便的，不需要操心任何事情专心写作即可；</li><li>或者可以使用一些博客框架，比如一些静态博客框架如 <code>hexo</code>（基于<code>node.js</code>），<code>hugo</code>（基于<code>go</code>）和一些动态博客框架如 <code>WordPress</code>，<code>typecho</code> 等，这些博客框架搭建完环境后也非常容易写作，主要是可以将网站的主题改成自己喜爱的样子；</li><li>还有一种当然是所有的都是自己实现了，也就是自己写一个博客网站，我感觉这个要做的好，要求比较很高，需要有扎实 web 开发的基础。</li></ul><h1 id="二、需求分析"><a href="#二、需求分析" class="headerlink" title="二、需求分析"></a>二、需求分析</h1><p>一个博客需要有什么功能呢？</p><p>我们可以从各大博客网站，博客框架中进行归纳总结，我总结出来一些功能：</p><ol><li>注册、登录、注销、后台管理界面（本条针对动态博客）</li><li>写文章、编辑更新文章、查看文章、删除文章</li><li>点赞、评论、分享</li><li>支持 markdown 语法写作</li><li>个人资料页的展示（包括作者资料，最近发表的文章）</li><li>…</li></ol><h1 id="三、技术点简介"><a href="#三、技术点简介" class="headerlink" title="三、技术点简介"></a>三、技术点简介</h1><h2 id="1-flask"><a href="#1-flask" class="headerlink" title="1. flask"></a>1. flask</h2><p>flask 是我项目用到的一个 Python Web后端框架，特点是轻量级，支持自由灵活高度定制，（虽然对我一个没有什么开发经验的人来说没有什么区别）。</p><p>当然，与 flask 同一类型的 Python 开发框架就是大名鼎鼎的 <code>Django</code> 了，我们可以根据官方文档总结一下他们的特点</p><table><thead><tr><th align="center">项目</th><th align="center">Flask</th><th align="center">Django</th></tr></thead><tbody><tr><td align="center">量级</td><td align="center">轻量级</td><td align="center">重量级</td></tr><tr><td align="center">特点</td><td align="center">只提供 web 框架的核心功能，自由灵活高度定制</td><td align="center">为方便业务程序的开发，提供了丰富的工具、组件</td></tr><tr><td align="center">用此框架实现的网站</td><td align="center">LinkedIn，Netflix，Twilio，Uber</td><td align="center">Bitbucket，Eventbrite， Instagram，Pinterest</td></tr></tbody></table><p>我选择 flask 的原因很大一部分原因是因为简单，因为我只是开发一个小网站，并不是大型网站，使用<code>Django</code>的话感觉学习成本更高。</p><h2 id="2-数据库的选择"><a href="#2-数据库的选择" class="headerlink" title="2. 数据库的选择"></a>2. 数据库的选择</h2><p>根据 flask 的官方文档，推荐可供选择的数据库是：<code>SQLite</code> 和 <code>SQLAlchemy</code></p><p>他们的特点是</p><table><thead><tr><th align="center">SQLite 3</th><th align="center">SQLAlchemy</th></tr></thead><tbody><tr><td align="center">Python 内置，简单</td><td align="center">需要额外配置，比较麻烦</td></tr><tr><td align="center">适用于小型应用，不适合并发场合</td><td align="center">适用于大型应用、高并发场合</td></tr></tbody></table><p>很显然，SQLite 适合我这个小项目，用不上并发编程，所以我选了 SQLite3。</p><h2 id="3-前端的模版"><a href="#3-前端的模版" class="headerlink" title="3. 前端的模版"></a>3. 前端的模版</h2><p>从服务器端取出的数据当然需要在前端展示，flask 中引入了一个叫<code>Jinja</code>的模版引擎，这个引擎可以很方便地来实现：</p><ul><li>子页面继承母版页面；</li><li>从服务器端取出的数据通过变量插入模版展示在前端；</li><li>前端页面插入<code>if</code>条件语句,<code>for</code>循环语句来帮助我们控制前端展示的逻辑。</li></ul><p>这是一个<code>Jinja</code>文档中简单的例子：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/jzhmcoo1/jzhmcoo1picrepo/raw/master/img/jinja.png" alt="image-20200602161135385"></p><p>可以看到，使用<code>NaN</code>的形式可以很轻松地插入表达式或传递变量。</p><h1 id="四、功能的实现"><a href="#四、功能的实现" class="headerlink" title="四、功能的实现"></a>四、功能的实现</h1><p>从我分析的需求中，（由于能力和精力有限）我挑选了一些功能进行实现。</p><ul><li><input checked="" disabled="" type="checkbox"> <p>登录，注册，注销 </p></li><li><input checked="" disabled="" type="checkbox"> <p>评论</p></li><li><input checked="" disabled="" type="checkbox"> <p>写文章，查看文章，编辑文章，删除文章</p></li><li><input checked="" disabled="" type="checkbox"> <p>markdown语法写作支持</p></li><li><input checked="" disabled="" type="checkbox"> <p>个人资料页的展示</p></li><li><input checked="" disabled="" type="checkbox"> <p>上传图片(文章封面图，作者个人图片)</p></li><li><input disabled="" type="checkbox"> <p>点赞、分享</p></li><li><input disabled="" type="checkbox"> <p>文章目录（点了就能直接跳转的那种）</p></li><li><input disabled="" type="checkbox"> <p>分享功能（分享到 QQ，微信）</p></li><li><input disabled="" type="checkbox"> <p>…</p></li></ul><p>刚开始觉得看着简单，但真正地实现这些功能，不自己动手写一写真实不知道会遇到的坑和 bug 真是数不胜数，下面简单地说一下实现思路：</p><ol><li><p>账号管理</p><ul><li>基本的账号管理，牵涉到数据库的CRUD；</li><li>注册时，首先需要判断是否和已有账号重复，前端对密码验证时，进行了两次验证，确保密码输入一致，保存密码到数据库时，不建议直接明文保存，还好 flask 提供了一个<code>generate_password_hash(password)</code>的函数，对明文密码先进行 hash，再存储到数据库中；</li><li>登录时对用户输入的用户名密码进行检查，若无误，则把<code>session</code>赋值为登录用户；</li><li>注销时，对<code>session</code>进行清除即可。</li></ul></li><li><p>文章的操作</p><ul><li>写（编辑）需要用到前端的<code>Webform</code>，将文章的信息，内容保存到数据库中；</li><li>为了实现<code>markdown</code>写作，Python 中正好题库了这么一个库，就叫<code>markdown</code>，它可以将<code>markdown</code>语法的字符串转换为带有<code>html</code>标记，再通过<code>jinja</code>模版引擎，把已经转换到带有<code>html</code>标记的文章嵌入前端页面中，即可实现，展示效果通过<code>css</code>实现；</li></ul></li><li><p>图片（文件）上传</p><ul><li>图片如何上传呢？图片不是文本文件，不能直接保存到数据库中；</li><li>我在网上搜索了解决方案，一种是使用编码方式，将图片转换为编码文本（如<code>Base64</code>）再存入数据库。仔细想了一下，感觉不适用，首先是因为麻烦，每次浏览时都需要从数据库中取出编码文本，进行译码，形成图片文件，其次是前端展示时需要用到<code>&lt;img src=&quot;&quot;&gt;</code>标签，那么我们的文件超链接哪里来呢？感觉实现困难。</li><li>第二种方式比较可行，即当上传一张图片时，服务器将图片保存到本地的文件系统中，同时形成绝对地址，再将地址保存到数据库中，这样不仅方便取，也方便更新文件。</li><li>保存文件使用了 Python 中的<code>os</code>内置库，非常方便。想到文件的重名问题，我还引入了 time 库，用户上传文件时，通过获取当前的系统时间，对文件重命名为<code>年月日时分秒.jpg</code>这样的格式，保证不会重复；</li><li>当用户更新自己的图片时，从数据库中取出已有的文件路径，对其进行删除，再保存新文件到本地文件系统，将路径存放到数据库中。</li></ul></li><li><p>评论</p><ul><li>评论我没有自己进行实现，由于我自己 hexo 博客是引入的是<code>valine</code>的无数据库评论模块，简单，方便，美观（何必重复造轮子呢？）只需要引入<code>js</code>就能够嵌入前端页面中。</li></ul></li></ol><h1 id="五、项目结构"><a href="#五、项目结构" class="headerlink" title="五、项目结构"></a>五、项目结构</h1><p>下面是项目的主要组成结构树形图，对主要的文件（夹）我进行了说明：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">37 directories</span><br><span class="line"> lixing  ~&#x2F;PycharmProjects&#x2F;MyBlog&#x2F;flaskr   master  tree</span><br><span class="line">.</span><br><span class="line">├── __init__.py &#x2F;&#x2F; 工厂函数文件</span><br><span class="line">├── auth.py &#x2F;&#x2F; 账号相关操作的代码</span><br><span class="line">├── blog.py &#x2F;&#x2F; 博客文章相关代码</span><br><span class="line">├── config.py &#x2F;&#x2F; 对文件路径进行配置</span><br><span class="line">├── db.py &#x2F;&#x2F; 数据库相关代码</span><br><span class="line">├── schema.sql &#x2F;&#x2F; 初始化数据库（建表）的代码</span><br><span class="line">├── setup.py &#x2F;&#x2F; 配置相关代码</span><br><span class="line">├── static &#x2F;&#x2F; 静态文件（css，图片，js）</span><br><span class="line">│   ├── blog.css</span><br><span class="line">│   ├── images</span><br><span class="line">│   │   ├── bg4.jpg</span><br><span class="line">│   │   ├── default</span><br><span class="line">│   │   │   ├── default.jpg</span><br><span class="line">│   │   │   └── post.jpg</span><br><span class="line">│   │   ├── footer-bg.png</span><br><span class="line">│   │   └── upload</span><br><span class="line">│   │       ├── avatars</span><br><span class="line">│   │       └── postImages</span><br><span class="line">│   ├── styles.css</span><br><span class="line">│   └── theme &#x2F;&#x2F; 这个是我套用的一个 bootstrap 模版的相关文件</span><br><span class="line">│       ├── css</span><br><span class="line">│       │   ├── maps</span><br><span class="line">│       │   │   └── style.css.map</span><br><span class="line">│       │   └── style.css</span><br><span class="line">│       ├── images</span><br><span class="line">│       ├── js</span><br><span class="line">│       │   └── script.js</span><br><span class="line">│       ├── plugins</span><br><span class="line">│       │   ├── bootstrap</span><br><span class="line">│       │   ├── fonts</span><br><span class="line">│       │   ├── jQuery</span><br><span class="line">│       │   ├── shuffle</span><br><span class="line">│       │   ├── slick</span><br><span class="line">│       │   └── themify-icons</span><br><span class="line">│       └── scss</span><br><span class="line">└── templates &#x2F;&#x2F; 母版文件夹</span><br><span class="line">    ├── Homepage.html</span><br><span class="line">    ├── auth</span><br><span class="line">    │   ├── info.html</span><br><span class="line">    │   ├── login.html</span><br><span class="line">    │   ├── register.html</span><br><span class="line">    │   └── update.html</span><br><span class="line">    └── blog</span><br><span class="line">        ├── create.html</span><br><span class="line">        ├── detail.html</span><br><span class="line">        ├── index.html</span><br><span class="line">        └── update.html</span><br></pre></td></tr></table></figure><h1 id="六、项目展示"><a href="#六、项目展示" class="headerlink" title="六、项目展示"></a>六、项目展示</h1><ol><li><p>配置<code>flask</code>运行环境，初始化数据库，启动项目</p> <figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">(venv)  lixing  ~/PycharmProjects/MyBlog   master  <span class="built_in">export</span> FLASK_APP=flaskr     </span><br><span class="line">(venv)  lixing  ~/PycharmProjects/MyBlog   master  <span class="built_in">export</span> FLASK_ENV=development</span><br><span class="line">(venv)  lixing  ~/PycharmProjects/MyBlog   master  flask init-db               </span><br><span class="line">Initialized the database.</span><br><span class="line">(venv)  lixing  ~/PycharmProjects/MyBlog   master  flask run</span><br><span class="line"> * Serving Flask app <span class="string">"flaskr"</span> (lazy loading)</span><br><span class="line"> * Environment: development</span><br><span class="line"> * Debug mode: on</span><br><span class="line"> * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)</span><br><span class="line"> * Restarting with <span class="built_in">stat</span></span><br><span class="line"> * Debugger is active!</span><br><span class="line"> * Debugger PIN: 757-386-815</span><br></pre></td></tr></table></figure></li><li><p>后序步骤省略（因为不想贴图了）具体可以去项目地址看：</p><ul><li><a href="https://github.com/jzhmcoo1/MyBlog" target="_blank" rel="noopener">https://github.com/jzhmcoo1/MyBlog</a></li></ul></li></ol><h1 id="七、项目总结"><a href="#七、项目总结" class="headerlink" title="七、项目总结"></a>七、项目总结</h1><ol><li>我遇到的困难<ul><li>这是我第一次自己写小项目，我懂得了从一个需求到具体功能的实现是非常不易的，有的时候思路不对，有的时候是遇到了 bug，这个过程是十分艰辛的。</li><li>我的 web 开发基础非常差，是这个学期现学现卖，而且懂得也太少了，经常会传递错页面的参数，以及页面的布局达不到想要的效果。</li><li>大多数的技术点，Python 库，框架的使用，如果不能查到类似的中文博客实现的话，就只能去看官方文档，往往需要查看英文文档，看着英文头疼往往成了最大的阻碍，只能硬着头皮看。</li></ul></li><li>我的收获<ul><li>非常感谢有这个机会来动手实践，实际操作一下，让我知道了自己的不足，我也收获了自己的第一个小项目。</li><li>培养了我的自学能力和动手能力，并且也锻炼了我的抽象能力和逻辑思维能力。</li><li>知道了不足之后，就用了努力的目标和方向，今后会加强基础，学习web开发框架。</li></ul></li><li>其他<ul><li>作为我的第一个项目，我将它开源到了 Github 上，希望有时间能够多多维护更新<ul><li><a href="https://github.com/jzhmcoo1/MyBlog" target="_blank" rel="noopener">https://github.com/jzhmcoo1/MyBlog</a></li></ul></li></ul></li></ol><h1 id="八、参考文档"><a href="#八、参考文档" class="headerlink" title="八、参考文档"></a>八、参考文档</h1><ul><li><a href="https://dormousehole.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">欢迎来到 Flask 的世界 — Flask 中文文档（ 1.1.1 ）</a></li><li><a href="https://jinja.palletsprojects.com/en/2.11.x/templates/" target="_blank" rel="noopener">Template Designer Documentation — Jinja Documentation (2.11.x)</a></li><li><a href="https://github.com/Blackyukun/quiet" target="_blank" rel="noopener">Blackyukun/quiet: 支持上传 markdown 文件生成 html 的 flask 静态博客</a></li><li><a href="https://python-markdown.github.io/sitemap.html" target="_blank" rel="noopener">Sitemap — Python-Markdown 3.2.2 documentation</a></li><li><a href="https://juejin.im/entry/5a8d8776f265da4e8b2feac7" target="_blank" rel="noopener">基于flask的静态博客 - 后端 - 掘金</a></li><li><a href="https://valine.js.org/quickstart.html" target="_blank" rel="noopener">快速开始 | Valine 一款快速、简洁且高效的无后端评论系统。</a></li><li><a href="https://themefisher.com/products/kross-creative-portfolio-template/" target="_blank" rel="noopener">kross - bootstrap 前端模版</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Share Some Useful Tools</title>
      <link href="/2020/05/22/app-share-I/"/>
      <url>/2020/05/22/app-share-I/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第一次写随笔奥，今天就来分享一些好用的小工具/有用的网站吧。</p><hr><h1 id="代码截图生成——Carbon"><a href="#代码截图生成——Carbon" class="headerlink" title="代码截图生成——Carbon"></a>代码截图生成——Carbon</h1><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>carbon 是一个生成代码截图的网站。网站上可以复制进代码，然后返回代码高亮的代码截图图片。可以自定义样式或者使用预定义样式，支持使用 github 登录，这样，自定义样式就能被保存下来了。</p><p>具体可以看：<a href="https://carbon.now.sh/about" target="_blank" rel="noopener">about - carbon</a></p><h2 id="网址："><a href="#网址：" class="headerlink" title="网址："></a>网址：</h2><p><a href="https://carbon.now.sh" target="_blank" rel="noopener">https://carbon.now.sh</a></p><h2 id="截图："><a href="#截图：" class="headerlink" title="截图："></a>截图：</h2><img src= "/img/loading.gif" data-src="https://gitee.com/jzhmcoo1/jzhmcoo1picrepo/raw/master/img/carbon.png" style="zoom:50%;" /><hr><h1 id="画图工具——draw-io"><a href="#画图工具——draw-io" class="headerlink" title="画图工具——draw.io"></a>画图工具——draw.io</h1><h2 id="简介：-1"><a href="#简介：-1" class="headerlink" title="简介："></a>简介：</h2><p>一款开源的、在线的画图工具，支持多种图形，支持分享，支持存储在云盘</p><p>具体可以看介绍：<a href="https://www.diagrams.net" target="_blank" rel="noopener">draw.io介绍</a> ，网站支持简体中文。</p><h2 id="网址：-1"><a href="#网址：-1" class="headerlink" title="网址："></a>网址：</h2><p><a href="https://app.diagrams.net" target="_blank" rel="noopener">https://app.diagrams.net</a></p><h2 id="截图：-1"><a href="#截图：-1" class="headerlink" title="截图："></a>截图：</h2><img src= "/img/loading.gif" data-src="https://gitee.com/jzhmcoo1/jzhmcoo1picrepo/raw/master/img/drawio.png" style="zoom:50%;" /><hr><h1 id="歌单导入——Spot"><a href="#歌单导入——Spot" class="headerlink" title="歌单导入——Spot"></a>歌单导入——Spot</h1><h2 id="简介：-2"><a href="#简介：-2" class="headerlink" title="简介："></a>简介：</h2><p>支持从网易云、QQ、虾米、百度音乐歌单导入到 spotify 中。只需要复制歌单的链接，黏贴进去即可自动导入。</p><h2 id="网站："><a href="#网站：" class="headerlink" title="网站："></a>网站：</h2><p><a href="https://spot.uselesses.com/#/" target="_blank" rel="noopener">https://spot.uselesses.com/#/</a></p><h2 id="截图：-2"><a href="#截图：-2" class="headerlink" title="截图："></a>截图：</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/jzhmcoo1/jzhmcoo1picrepo/raw/master/img/spotspot.jpg" alt=""></p><hr><h1 id="PDF-文档电子书查找——鸠摩搜书"><a href="#PDF-文档电子书查找——鸠摩搜书" class="headerlink" title="PDF 文档电子书查找——鸠摩搜书"></a>PDF 文档电子书查找——鸠摩搜书</h1><h2 id="简介：-3"><a href="#简介：-3" class="headerlink" title="简介："></a>简介：</h2><p>一个界面简介的搜索 PDF 的网站，资源还是很丰富的</p><p>具体可以看：<a href="https://www.jiumodiary.com/info.php" target="_blank" rel="noopener">Info | Jiumo E-Book Search</a></p><h2 id="网站：-1"><a href="#网站：-1" class="headerlink" title="网站："></a>网站：</h2><p><a href="https://www.jiumodiary.com" target="_blank" rel="noopener">https://www.jiumodiary.com</a></p><h2 id="截图：-3"><a href="#截图：-3" class="headerlink" title="截图："></a>截图：</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/jzhmcoo1/jzhmcoo1picrepo/raw/master/img/soushu.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 工具分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Box Model</title>
      <link href="/2020/05/18/CSS-Box-Model/"/>
      <url>/2020/05/18/CSS-Box-Model/</url>
      
        <content type="html"><![CDATA[<h1 id="Block-and-inline-boxes"><a href="#Block-and-inline-boxes" class="headerlink" title="Block and inline boxes"></a>Block and inline boxes</h1><h2 id="定义为-block："><a href="#定义为-block：" class="headerlink" title="定义为 block："></a>定义为 <code>block</code>：</h2><ul><li>盒子会换行</li><li>盒子会向内联方向延展，填充容器中的可用空间（大多数情况会填满所有空间，和容器大小一样）</li><li><code>width</code>和<code>height</code>属性可以发挥作用</li><li><code>padding</code>,<code>margin</code>,<code>height</code>属性将会把其他元素推离盒子</li><li><code>&lt;p&gt;</code>和所有的标题<code>&lt;h1&gt;</code>等是 <strong>默认采用 block</strong>的</li></ul><h2 id="定义为inline"><a href="#定义为inline" class="headerlink" title="定义为inline:"></a>定义为<code>inline</code>:</h2><ul><li>盒子不会换行</li><li><code>width</code>和<code>height</code>属性将不会起作用</li><li><strong>垂直方向</strong>的<code>padding</code>,<code>margin</code>,<code>border</code>能起作用但不会使得其他<code>inline</code>盒子被推离</li><li><strong>水平方向</strong>的<code>padding</code>,<code>margin</code>,<code>border</code>能起作用并且会推离其他盒子</li><li><code>&lt;a&gt;</code>，<code>&lt;span&gt;</code>,<code>&lt;em&gt;</code>,<code>&lt;strong&gt;</code>都是 <strong>默认采用 inline</strong>显示的</li></ul><hr><h1 id="Aside-Inner-and-outer-display-types"><a href="#Aside-Inner-and-outer-display-types" class="headerlink" title="Aside: Inner and outer display types"></a>Aside: Inner and outer display types</h1><ul><li><p>block 和 inline 都是代表 outer display type</p></li><li><p>Box 的 inner display type 则表示了 box 内部是如何布局的，默认是正常的</p></li><li><p>当我们使用<code>display:flex</code>之类的设置时，外部的显示类型是<code>block</code>，但是内部的显示类型是<code>flex</code>的，此盒子的任何直接子级都将成为<code>flex</code>项目，并且根据 <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox" target="_blank" rel="noopener">Flexbox</a> 规则布局。</p></li><li><p><code>block</code>和<code>inline</code>布局都是被视作正常的情况，即没有任何指定时，盒子都是根据这两个来布局的</p></li></ul><p>我自己的理解：</p><p>当盒子被声明为 flex 时，盒子本身是 block 的，对（默认为block的标签来说），而内部的显示为 flex</p><p>当盒子被声明为 inline-flex 时，盒子本身将成为 inline，而内部显示为 flex</p><p>为了确定我看完文档，理解是正确的，不妨我们动手实践一下，修改 mdn 上的代码</p><p>源代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I am a paragraph. A short one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item One<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item Two<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item Three<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I am another paragraph. Some of the <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span>words<span class="tag">&lt;/<span class="name">span</span>&gt;</span> have been wrapped in a <span class="tag">&lt;<span class="name">span</span>&gt;</span>span element<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>, </span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid rebeccapurple;</span><br><span class="line">  <span class="attribute">padding</span>: .<span class="number">5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.block</span>,</span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid blue;</span><br><span class="line">  <span class="attribute">padding</span>: .<span class="number">5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.block</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将代码 14 行<code>display</code>改成<code>inline-flex</code>, （为了查看效果，<code>&lt;p&gt;</code> 默认的是<code>block</code>的，这里显示地更改其为<code>inline</code>)，应该会看到<code>&lt;p&gt;</code>元素与<code>&lt;ul&gt;</code>元素拼入同一行了。</p><p>查看效果对比：</p><p>原来：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/jzhmcoo1/jzhmcoo1picrepo/raw/master/img/css-box-flex.png" alt=""></p><p>修改完毕：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/jzhmcoo1/jzhmcoo1picrepo/raw/master/img/css-box-inline-flex.png" alt=""></p><p>虽然显示效果不好，但是的确修改之后，<code>&lt;ul&gt;</code>和<code>&lt;p&gt;</code>元素成为了内联元素，拼接在了同一行了。</p><hr><h1 id="CSS-box-model"><a href="#CSS-box-model" class="headerlink" title="CSS box model"></a>CSS box model</h1><h2 id="标准盒子模型"><a href="#标准盒子模型" class="headerlink" title="标准盒子模型"></a>标准盒子模型</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/jzhmcoo1/jzhmcoo1picrepo/raw/master/img/box-model.png" alt=""></p><p>这是 block box 模型的图，其中：</p><ul><li>Content box: 作为展示内容的区域，可以通过<code>width</code>和<code>height</code>来调整大小</li><li>Padding box: 位于内容区域的周围空白部分，可以通过<code>padding</code>来调整</li><li>Border box: 边框包围了内容和内边距，通过<code>border</code>和相关属性来调整</li><li>Margin box: 外边距包围了内容，内边距和边框，作为此盒子与其他元素的空白部分，通过<code>margin</code>和相关属性调整</li></ul><h2 id="替代盒子模型"><a href="#替代盒子模型" class="headerlink" title="替代盒子模型"></a>替代盒子模型</h2><p>标准盒子模型的实际宽度是$content.width+2\times padding+2\times border$的结果，同理实际高度</p><p>而这对于计算实际大小是不方便的，因此可以设置为 <strong>替代盒子模型</strong> </p><p>使用了替代盒子模型后，内容区域的实际宽度是：$content.width=width_{real}-2\times padding -2\times border$</p><p>即对盒子显式设置的宽度和高度，就是盒子显示的大小</p><p>通过<code>box-sizing:border-box;</code> 来设置。</p><p>如果需要所有元素都是用替代框盒子，可以设置<code>box-sizing</code>属性，以及将所有其他元素设置为继承该值，如下面的代码片段：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line">*, *<span class="selector-pseudo">::before</span>, *<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MDN-上的例子"><a href="#MDN-上的例子" class="headerlink" title="MDN 上的例子"></a>MDN 上的例子</h2><p>通过计算，修改<code>.alternate</code>里的<code>height</code>和<code>width</code>属性分别为<code>240px</code>和<code>390px</code>即可解决</p>]]></content>
      
      
      <categories>
          
          <category> StudyNotes </category>
          
          <category> WebDevelopment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> The box model </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Instruction System</title>
      <link href="/2020/05/17/Instruction-system/"/>
      <url>/2020/05/17/Instruction-system/</url>
      
        <content type="html"><![CDATA[<h1 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h1><blockquote><p>指令：计算机硬件能识别并直接执行的操作命令。</p><p>指令系统：一台计算机能执行的全部指令的集合。</p></blockquote><h2 id="指令的基本格式"><a href="#指令的基本格式" class="headerlink" title="指令的基本格式"></a>指令的基本格式</h2><blockquote><p>一条指令是一组有意义的二进制代码。通常包括 <strong>操作数</strong> 字段和 <strong>地址码</strong> 字段</p></blockquote><ul><li>指令长度：一条指令包含的 2 进制代码位数</li><li>指令长度与机器字长没有固定关系</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/jzhmcoo1/jzhmcoo1picrepo/raw/master/img/InstructionStructure.jpg" alt=""></p><h3 id="零地址指令"><a href="#零地址指令" class="headerlink" title="零地址指令"></a>零地址指令</h3><p>只给出操作码，没有显式地址，2 种可能：</p><ol><li>不需要操作数的指令，如：空操作数指令，停机指令，关中断指令。</li><li>零地址指令仅用于堆栈计算机中。参与运算的两个操作数隐含地从栈顶和次栈顶弹出，送到运算器进行运算，运算结果隐含地压栈</li></ol><h3 id="一地址指令"><a href="#一地址指令" class="headerlink" title="一地址指令"></a>一地址指令</h3><p>2 种可能：</p><ol><li><p>只有目的操作数的单操作指令，按 A1 地址读取操作数，进行 OP 操作后，结果存回原地址。</p><ul><li>指令含义：$OP(A_1)\rightarrow A_1$</li><li>操作码含义：+1，-1，求反，求补等</li></ul></li><li><p>隐含约定目的的双操作数指令，按指令地址 A1 可读取源操作数，指令可隐含约定另一个操作数由 ACC（累加器）提供，运算结果也将存放在 ACC 中</p><ul><li>指令含义：$(ACC)OP(A_1)\rightarrow ACC$</li><li>下一条指令的地址有 PC 提供</li></ul></li></ol><h3 id="二地址指令"><a href="#二地址指令" class="headerlink" title="二地址指令"></a>二地址指令</h3><ul><li>指令含义：$(A_1)OP(A_2)\rightarrow A_1$</li><li>下一条指令的地址由 PC 提供</li></ul><h3 id="三地址指令"><a href="#三地址指令" class="headerlink" title="三地址指令"></a>三地址指令</h3><ul><li>指令含义：$(A_1)OP(A_2)\rightarrow A_3$</li><li>下一条指令的地址由 PC 提供</li></ul><h3 id="四地址指令"><a href="#四地址指令" class="headerlink" title="四地址指令"></a>四地址指令</h3><ul><li>指令含义：$(A_1)OP(A_2)\rightarrow A_3, A_4=\text{下一条指令将要执行指令的地址}$</li><li>$A_4$提供下一条指令的地址</li></ul><h2 id="操作码"><a href="#操作码" class="headerlink" title="操作码"></a>操作码</h2><h3 id="定长操作码"><a href="#定长操作码" class="headerlink" title="定长操作码"></a>定长操作码</h3><ul><li>优点：简化计算机硬件设计，提高指令译码和识别速度</li></ul><h3 id="扩展操作码"><a href="#扩展操作码" class="headerlink" title="扩展操作码"></a>扩展操作码</h3><ol><li>不允许短码是长码的前缀</li><li>各指令的操作码一定不能重复</li></ol><hr><h1 id="指令的寻址方式"><a href="#指令的寻址方式" class="headerlink" title="指令的寻址方式"></a>指令的寻址方式</h1><blockquote><p>寻找指令或操作数有效地址的方式，即确定本条指令的 <strong>数据地址</strong> 及 <strong>下条待执行指令的地址</strong> 的方法。</p></blockquote><h2 id="指令寻址"><a href="#指令寻址" class="headerlink" title="指令寻址"></a>指令寻址</h2><ol><li>顺序寻址<ul><li>通过程序计数器（PC) + 1（1 个指令字长），自动形成下一条指令的地址。</li></ul></li><li>跳跃寻址<ul><li>下条指令的地址码不由 PC 给出，而是本条指令给出下条指令的计算方式</li><li>跳跃的结果是当前指令修改 PC 值，所有下一条指令仍然通过 PC 给出</li></ul></li></ol><h2 id="数据寻址"><a href="#数据寻址" class="headerlink" title="数据寻址"></a>数据寻址</h2><blockquote><p>数据寻址指如何在指令中表示一个操作数的地址， 如何 <strong>用这种表示得到操作数或怎样计算出操作数的地址</strong>。</p><p>为区别各种数据寻址方式，通常在指令字中设一个字段，用来指明属于哪种寻址方式。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/jzhmcoo1/jzhmcoo1picrepo/raw/master/img/%E6%95%B0%E6%8D%AE%E5%AF%BB%E5%9D%80.jpg" alt=""></p><h3 id="隐含寻址"><a href="#隐含寻址" class="headerlink" title="隐含寻址"></a>隐含寻址</h3><blockquote><p>不明显给出操作数地址，而在指令中隐含操作数地址。</p></blockquote><p>例如：单地址指令，不明显指出第二操作数的地址，而规定 ACC 作为第二操作数的地址，指令格式明显指出的仅是第一操作数的地址。因此，ACC 对单地址指令格式来说是隐含寻址。</p><ul><li>优点：有利于缩短指令字长；</li><li>缺点：需要增加存储操作数或隐含地址的 <strong>硬件</strong>。</li></ul><h3 id="立即-数-寻址"><a href="#立即-数-寻址" class="headerlink" title="立即(数)寻址"></a>立即(数)寻址</h3><blockquote><p>指令的地址字段指出的是操作数本身，数据采用补码形式存放。</p></blockquote><ul><li>优点：指令执行阶段不访问主存，指令执行时间最段；</li><li>缺点：A 的位数限制了立即数的范围</li></ul><h3 id="直接寻址"><a href="#直接寻址" class="headerlink" title="直接寻址"></a>直接寻址</h3><blockquote><p>指令字的形式地址 A 是操作数的真实地址 EA，即 EA=A</p></blockquote><ul><li>优点：简单，执行阶段仅访问一次主存，不需要专门计算操作数的地址；</li><li>缺点：A 的位数决定了操作数的寻址范围，操作数的地址不易修改</li></ul><h3 id="间接寻址"><a href="#间接寻址" class="headerlink" title="间接寻址"></a>间接寻址</h3><blockquote><p>指令的地址字段给出的是形式地址，不是操作数的真正地址，而是操作数有效地址所在的存储单元的地址，即操作数地址的地址。$EA = (A)$ ，间接寻址还可以是一次，多次间接寻址。</p></blockquote><ul><li>优点：扩大寻址范围（有效地址 EA 的位数大于形式地址 A 的位数），便于编制程序（间接寻址可方便地完成子程序的返回）；</li><li>缺点：指令在执行阶段要多次访问内存（ 1 次间接访问 2 次内存），访问速度过慢，这种寻址方式不常用。</li></ul><h3 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h3><blockquote><p>寄存器寻址指：指令字中直接给操作数所在的寄存器编号，即$EA=R_i$，其操作数在由$R_i$所指的寄存器内</p></blockquote><ul><li>优点：执行阶段不访问内存，只访问寄存器，因寄存器数量少，对应地址码长度小，使得指令字短且因不访存，执行速度快，支持向量/矩阵运算；</li><li>缺点：寄存器价格昂贵，计算机寄存器数量有限</li></ul><h3 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h3><blockquote><p>寄存器间接寻址是指：寄存器$R_i$给出的不是一个操作数，而是操作数在主存单元的地址，即$EA=(R_i)$</p></blockquote><ul><li>特点：比一般的间接寻址速度快，但执行指令阶段需要访问主存（操作数在主存中）</li></ul><h3 id="相对寻址"><a href="#相对寻址" class="headerlink" title="相对寻址"></a>相对寻址</h3><blockquote><p>把 PC 的内容加上指令格式中的形式地址 A 而形成操作数的有效地址，即$EA=(PC)+A$</p></blockquote><ul><li>A 相对于当前指令地址的位移量，可正可负，补码表示</li><li>A 的位数决定操作数的寻址范围</li><li>优点：操作数的地址不是固定的，随 PC 值的变化而变化；与指令地址之间总是差一个固定值，因此便于程序浮动。相对寻址广泛应用于转移指令。</li></ul><h3 id="基址寻址"><a href="#基址寻址" class="headerlink" title="基址寻址"></a>基址寻址</h3><blockquote><p>将 CPU 中的基址寄存器(BR)的内容加上指令格式中的形式地址 A 而形成操作数的有效地址，即$EA=(BR)+A$</p><p>基址寄存器既可采用专用寄存器，又可采用通用寄存器。</p></blockquote><ul><li><p>基址寄存器是面向操作系统的，内容有操作系统或管理程序确定，主要用于解决程序逻辑空间与存储器物理空间的无关性。程序执行过程中，基址寄存器内容不变（作为基地址），形式地址可变（作为偏移量）。采用通用寄存器作为基址寄存器时，用户可决定哪个寄存器作为基址寄存器，但其内容仍由操作系统决定。</p></li><li><p>优点：扩大寻址范围（基址寄存器位数大于形式地址 A 的位数）；用户不必考虑自己的程序存于主存的哪个空间区域，因此有利于多道程序设计，并可用于编制浮动程序，但偏移量（形式地址 A）的位数较短。</p></li></ul><h3 id="变址寻址"><a href="#变址寻址" class="headerlink" title="变址寻址"></a>变址寻址</h3><blockquote><p>变址寻址是指有效地址 EA 等于指令字的形式地址 A 与变址寄存器 IX 的内容之和，即 $EA=(IX)+A$</p><p>其中$IX$可为变址寄存器（专用）或通用寄存器。</p></blockquote><ul><li>变址寄存器是面向用户的，程序执行过程中，变址寄存器的内容可由用户改变（作为偏移量），形式地址 A 不变（作为基地址）。</li><li>优点：扩大寻址范围（变址寄存器的位数大于形式地址 A 的位数）；<strong>适合编制循环程序</strong>。</li></ul><table><thead><tr><th align="center"></th><th align="center">基址寻址</th><th align="center">变址寻址</th></tr></thead><tbody><tr><td align="center">面向</td><td align="center">面向系统，内容由操作系统或管理程序确定</td><td align="center">面向用户，内容用户设定</td></tr><tr><td align="center">用途</td><td align="center">用于多道程序或数据分配存储空间</td><td align="center">用于处理数组问题</td></tr><tr><td align="center">内容</td><td align="center">执行过程中其值不可变</td><td align="center">执行过程中其值可变</td></tr><tr><td align="center">形式地址 A</td><td align="center">可变</td><td align="center">不可变</td></tr></tbody></table><h3 id="堆栈寻址"><a href="#堆栈寻址" class="headerlink" title="堆栈寻址"></a>堆栈寻址</h3><blockquote><p>堆栈是存储器（或专用寄存器）中一组特定的、LIFO 的存储区，该存储区中读/写单元的地址用一个特定的寄存器给出，该寄存器称为堆栈指针（SP）。堆栈可分为硬堆栈与软堆栈两种。</p></blockquote><ul><li><p>硬堆栈：寄存器堆栈，成本高</p></li><li><p>软堆栈：从主存中划出一段区域来做堆栈</p></li><li><p>堆栈结构的计算机系统中，大部分指令表面上都表现为无操作数指令的形式，因为操作数都隐含使用了 SP。通常情况下，在读/写堆栈中的一个单元的前后都伴有自动完成对 SP 内容的增量或减量操作。</p></li></ul><h4 id="下面总结寻址方式、有效地址、访存次数"><a href="#下面总结寻址方式、有效地址、访存次数" class="headerlink" title="下面总结寻址方式、有效地址、访存次数"></a>下面总结寻址方式、有效地址、访存次数</h4><table><thead><tr><th align="left">寻址方式</th><th align="left">有效地址</th><th align="left">访存次数</th></tr></thead><tbody><tr><td align="left">隐含寻址</td><td align="left">程序指定</td><td align="left">0</td></tr><tr><td align="left">立即寻址</td><td align="left">$A$</td><td align="left">0</td></tr><tr><td align="left">直接寻址</td><td align="left">$EA=A$</td><td align="left">1</td></tr><tr><td align="left">一次间接寻址</td><td align="left">$EA=(A)$</td><td align="left">2</td></tr><tr><td align="left">寄存器寻址</td><td align="left">$E A = R_i$</td><td align="left">0</td></tr><tr><td align="left">寄存器间接寻址</td><td align="left">$EA = (R_i)$</td><td align="left">1</td></tr><tr><td align="left">相对寻址</td><td align="left">$E A=(PC)+A$</td><td align="left">1</td></tr><tr><td align="left">基址寻址</td><td align="left">$E A = (BR)+A$</td><td align="left">1</td></tr><tr><td align="left">变址寻址</td><td align="left">$E A=(IX)+A$</td><td align="left">1</td></tr></tbody></table><h4 id="寻址方式速度比较"><a href="#寻址方式速度比较" class="headerlink" title="寻址方式速度比较"></a>寻址方式速度比较</h4><p><img src= "/img/loading.gif" data-src="https://gitee.com/jzhmcoo1/jzhmcoo1picrepo/raw/master/img/%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F%E9%80%9F%E5%BA%A6%E6%AF%94%E8%BE%83.jpg" alt=""></p><hr><h1 id="指令类型"><a href="#指令类型" class="headerlink" title="指令类型"></a>指令类型</h1><ol><li>传送指令：传送到寄存器/存储单元</li><li>算术运算指令</li><li>逻辑运算指令</li><li>程序控制指令：控制程序的执行顺序，包括转移指令</li><li>输入输出指令：主机外设之间的信息交换</li><li>串操作指令</li><li>处理器控制类指令：完成某些控制功能的指令，如停机 HLT，等待 WAIT，空操作 NOP，陷阱和特权指令</li></ol><hr><h1 id="CISC与-RISC"><a href="#CISC与-RISC" class="headerlink" title="CISC与 RISC"></a>CISC与 RISC</h1><blockquote><p>指令系统朝着两个不同的方向发展：</p><p>一是增强原有指令的功能，设置更为复杂的新指令，实现软件功能硬化，这类机器称为 <strong>复杂指令系统计算机(CISC)</strong>，典型的有采用 X86 架构的计算机；</p><p>二是减少指令种类和简化指令功能，提高指令的执行速度，这类机器称为 <strong>精简指令系统计算机(RISC)</strong>，典型的有 ARM、MIPS 架构的计算机。</p></blockquote><h2 id="CISC-特点"><a href="#CISC-特点" class="headerlink" title="CISC 特点"></a>CISC 特点</h2><ol><li>指令系统复杂庞大，指令数目一般为 200 条以上</li><li>指令长度不固定，指令格式多，寻址方式多</li><li>可以访存的指令不受限制</li><li>各种指令使用频率相差很大</li><li>各种指令执行时间相差很大，大多数指令需要多个时钟周期才能完成</li><li>控制器大多数采用微程序控制。有些指令非常复杂，以至于无法采用硬连线控制。</li><li>难以用优化编译生成高效的目标代码程序。</li></ol><h2 id="RISC-特点"><a href="#RISC-特点" class="headerlink" title="RISC 特点"></a>RISC 特点</h2><ol><li>选用使用频率高的一些简单指令，复杂指令的功能由简单指令的组合实现</li><li>指令长度固定，指令格式种类少，寻址方式少</li><li>只有 Load/Store（取数/存数）指令访存，其余指令的操作都在寄存器之间进行</li><li>CPU 中的通用寄存器的数量相当多</li><li>RISC 一定采用指令流水线技术，大部分指令在一个时钟周期内完成</li><li>以硬布线控制为主，不用或少用微程序控制</li><li>特别重视编译优化工作，以减少程序执行时间</li></ol><h2 id="CISC-与-RISC-对比"><a href="#CISC-与-RISC-对比" class="headerlink" title="CISC 与 RISC 对比"></a>CISC 与 RISC 对比</h2><table><thead><tr><th align="center">项目</th><th align="center">CISC</th><th align="center">RISC</th></tr></thead><tbody><tr><td align="center">指令系统</td><td align="center">复杂，庞大</td><td align="center">简单，精简</td></tr><tr><td align="center">指令数目</td><td align="center">一般大于 200 条</td><td align="center">一般小于 100 条</td></tr><tr><td align="center">指令字长</td><td align="center">不固定</td><td align="center">定长</td></tr><tr><td align="center">可访存指令</td><td align="center">不加限制</td><td align="center">只有 Load/Store 指令</td></tr><tr><td align="center">各种指令执行时间</td><td align="center">相差较大</td><td align="center">绝大多数在一个周期内完成</td></tr><tr><td align="center">各种指令使用频度</td><td align="center">相差很大</td><td align="center">都比较常用</td></tr><tr><td align="center">通用寄存器数量</td><td align="center">较少</td><td align="center">多</td></tr><tr><td align="center">目标代码</td><td align="center">难以用优化编译生成高效的目标代码程序</td><td align="center">采用优化编译程序，生成代码较为高效</td></tr><tr><td align="center">控制方式</td><td align="center">绝大多数为为微程序控制</td><td align="center">绝大多数为组合逻辑控制</td></tr><tr><td align="center">指令流水线</td><td align="center">通过一定的方式实现</td><td align="center">必须实现</td></tr></tbody></table><blockquote><p>参考：王道考研书</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> StudyNotes </category>
          
          <category> Computer composition and structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死锁概述</title>
      <link href="/2020/04/24/Deadlock-I/"/>
      <url>/2020/04/24/Deadlock-I/</url>
      
        <content type="html"><![CDATA[<h1 id="死锁的定义"><a href="#死锁的定义" class="headerlink" title="死锁的定义"></a>死锁的定义</h1><blockquote><p>所谓死锁，是指多个进程 <strong>竞争资源而造成的一种僵局（相互等待）</strong>，若无外力作用，这些进程都无法向前推进</p></blockquote><h1 id="产生死锁的原因"><a href="#产生死锁的原因" class="headerlink" title="产生死锁的原因"></a>产生死锁的原因</h1><ol><li><h2 id="系统资源的竞争"><a href="#系统资源的竞争" class="headerlink" title="系统资源的竞争"></a>系统资源的竞争</h2><p> 进程运行过程中，互相争夺系统中的不可剥夺资源，如：磁带机、打印机等。</p><p> <strong>只有对不可剥夺资源的竞争才可能产生死锁，对可剥夺资源的竞争是不会引起死锁的。</strong></p></li><li><h2 id="进程推进顺序非法"><a href="#进程推进顺序非法" class="headerlink" title="进程推进顺序非法"></a>进程推进顺序非法</h2><ul><li>进程在运行过程中，<strong>请求和释放资源的顺序不当</strong>。（两进程申请的资源分别在对方那里）</li><li><strong>信号量使用不当</strong>。（互相等待对方的消息）</li></ul></li><li><h2 id="死锁产生的四个必要条件"><a href="#死锁产生的四个必要条件" class="headerlink" title="死锁产生的四个必要条件"></a>死锁产生的四个必要条件</h2><ul><li><p>产生死锁时必须 <strong>同时满足</strong>以下 4 个条件。</p><ol><li><p>互斥条件：在一段时间内，某资源仅为一个进程所占有，此时若有其他进程请求该资源，只能等待。</p></li><li><p>不可剥夺条件：进程获得的资源在未使用完之前，不能被其他进程强行剥夺，只能由该进程自己释放。</p></li><li><p>请求并保持条件：进程保持了至少一个资源，但又提出了新的自愿请求，而该资源已被其他进程占有，此进程被阻塞，<strong>但对自己的资源保持不放</strong>。</p></li><li><p>循环等待条件：存在一种进程资源的循环等待链。链中每个进程已获得的资源同时被链中的下个进程所请求。</p> <div class="mermaid">          graph LRP0((P0))-->P1((P1))P1-->P2((P2))P2-->Pi((Pi))Pi-->Pn((Pn))Pn-->P0          </div><p> <strong>资源分配图含圈</strong>是系统出现死锁的 <strong>充分必要条件</strong>。</p></li></ol></li></ul></li></ol><h1 id="死锁的处理策略"><a href="#死锁的处理策略" class="headerlink" title="死锁的处理策略"></a>死锁的处理策略</h1><blockquote><p>为使系统不发生死锁，必须设法破坏产生死锁的 4 个必要条件之一， 或运行死锁产生，当死锁发生时检测出并实现恢复。</p></blockquote><ol><li><h2 id="死锁预防"><a href="#死锁预防" class="headerlink" title="死锁预防"></a>死锁预防</h2><p> 设置限制条件，破坏产生死锁的 4 个必要条件之一，以防发生死锁</p></li><li><h2 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h2><p> 动态分配资源的过程中，用某种方法防止系统进入不安全状态，从而避免死锁</p></li><li><h2 id="死锁的检测及解除"><a href="#死锁的检测及解除" class="headerlink" title="死锁的检测及解除"></a>死锁的检测及解除</h2><p> 不采取任何限制性措施，允许进程运行过程中发生死锁。通过系统的检测，发现死锁，然后采取措施解除。</p></li></ol><blockquote><p>预防死锁和避免死锁都属于 <strong>事先预防策略</strong>；</p><p>预防死锁的限制条件比较严格，实现起来比较简单，但往往导致系统的效率较低；</p><p>避免死锁的限制条件相对宽松，实现起来比较复杂，资源分配后通过算法来判断是否进入了不安全状态。</p></blockquote><h2 id="死锁的处理策略的比较："><a href="#死锁的处理策略的比较：" class="headerlink" title="死锁的处理策略的比较："></a>死锁的处理策略的比较：</h2><table><thead><tr><th align="center"></th><th align="center">资源分配策略</th><th align="center">各种可能模式</th><th align="center">主要优点</th><th align="center">主要缺点</th></tr></thead><tbody><tr><td align="center">死锁预防</td><td align="center">保守，宁可闲置资源</td><td align="center">一次请求所有资源，资源剥夺，资源按序分配</td><td align="center">适用于突发式处理的进程，不必进行剥夺</td><td align="center">效率低，进程初始化时间延长；剥夺次数过多；不便灵活申请新资源</td></tr><tr><td align="center">死锁避免</td><td align="center">是“预防”和“检测”的折中（运行时判断是否可能死锁）</td><td align="center">寻找可能的安全允许顺序</td><td align="center">不必进行剥夺</td><td align="center">必须知道将来的资源需求；进程不能被长时间阻塞</td></tr><tr><td align="center">死锁检测</td><td align="center">宽松，只要允许就分配</td><td align="center">定期检查死锁是否已经发生</td><td align="center">不延长进程初始化时间，允许对死锁进行现场处理</td><td align="center">通过剥夺解除死锁，造成损失</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> StudyNotes </category>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面置换算法</title>
      <link href="/2020/04/22/Page-Replacement-Algorithm/"/>
      <url>/2020/04/22/Page-Replacement-Algorithm/</url>
      
        <content type="html"><![CDATA[<h1 id="页面置换算法Page-Replacement-Algorithm"><a href="#页面置换算法Page-Replacement-Algorithm" class="headerlink" title="页面置换算法Page Replacement Algorithm"></a>页面置换算法<strong>Page Replacement Algorithm</strong></h1><blockquote><p><font color="red">功能</font>：选择内存中哪个物理页面被置换。</p><p><font color="red">目标</font>：未来不再使用的或短期内较少使用的调出</p></blockquote><p>$$<br>缺页率 = \frac{缺页次数}{访问内存次数}<br>$$</p><h1 id="最佳置换算法（OPT"><a href="#最佳置换算法（OPT" class="headerlink" title="最佳置换算法（OPT)"></a>最佳置换算法（OPT)</h1><p>​    预测 换出<strong>永不再用</strong>，<strong>很长时间不访问的</strong></p><p>（向后看）</p><ul><li>优点： 缺页率最低，性能最好。</li><li>缺点：依赖对访问序列的了解，<strong>无法实现（理想）</strong>。<strong>只能用来评价</strong>其他算法。</li></ul><h1 id="先进先出（FIFO"><a href="#先进先出（FIFO" class="headerlink" title="先进先出（FIFO)"></a>先进先出（FIFO)</h1><p>​    最先进入的，驻留时间最长的就换出。谁先进来谁就先淘汰掉。</p><p>​    <strong>实现：</strong>页面按先后次序链接成一个队列，并设置一替换指针，总是指向最老的页面。</p><ul><li><strong>异常</strong>：FIFO 分配的主存块数增加，缺页率也增加了 （<strong>Belady 现象</strong>）<ul><li>原因：没有考虑实际运行规律，在进程中，有些页面经常被访问，比如 全局变量，常用函数，循环语句段等。</li></ul></li></ul><h1 id="最近最久未用-LRU-置换算法"><a href="#最近最久未用-LRU-置换算法" class="headerlink" title="最近最久未用 LRU 置换算法"></a>最近最久未用 LRU 置换算法</h1><ul><li><strong>利用最近的过去 预测 最近的将来</strong></li></ul><p>​    选择最近一段时间内最久不用的页面</p><ul><li><p><strong>实现</strong>：每个页面设置访问字段，记录上次访问的时间 t。 选择最大的 t 的页面。</p></li><li><p><strong>需要硬件支持，成本高</strong>， 性能好 接近最佳算法。</p></li><li><p><strong>需要解决：</strong></p><ul><li><p>各页面多久没访问</p></li><li><p>快速找到哪一页是最近最久没用的</p><p>1）设置<strong>移位寄存器</strong>，访问最高位设置为 1，每隔一定时间右移一位，找最小的 R 值置换出去。</p><p>2）栈：保存最近使用的各个页面号 <strong>栈底是最近最久没使用的</strong></p><p>  栈有：被访问的换到栈顶</p><p>  栈无：未满–压入栈顶，满了–将栈底移出，再压入栈顶</p></li></ul></li></ul><h1 id="Clock-置换算法"><a href="#Clock-置换算法" class="headerlink" title="Clock 置换算法"></a>Clock 置换算法</h1><p><strong>思想</strong>：置换最近一段时间内没有被使用的页面</p><p><strong>过程</strong>：每页设置访问位，内存中的所有页面链成循环队列。访问位为 0 的页面为置换页面，经过访问位 1 的被重新置换成 0，最后指针停留在被置换页的下一页。若查找一遍后没有访问位是 0 的页面则返回队首。</p><p><strong>该算法只考虑该页是否已经使用过，未考虑使用的时间，称为 “最近未用算法”(NRU)</strong></p><p>循环队列 访问位</p><div class="mermaid">          graph TDA(入口)-->B[查询指针前进一步]B-->C{页面访问位=0?}C--Yes-->D[选择该页面淘汰]D-->E[返回]C--No-->F[置页面访问位=0]F-->B          </div><h1 id="改进型-Clock-置换"><a href="#改进型-Clock-置换" class="headerlink" title="改进型 Clock 置换"></a>改进型 Clock 置换</h1><p>设置一个<strong>置换代价</strong>因素</p><p><strong>首选既没有被使用过也没修改过</strong> </p><p><strong>访问位 A ，修改位 M</strong></p><ul><li>1类（A = 0, M = 0）最佳淘汰页</li><li>2类（A = 0, M = 1)  未被访问，但被修改 不是很好的淘汰页</li><li>3类（A = 1, M = 0) 最近已被访问，可能再被访问</li><li>4类（A = 1, M = 1) 最近被访问，被修改，可能被再访问</li></ul><ol><li><strong>先找 1 类页面</strong> 访问位 A 值不变 遇到的第一个为选中页</li><li>找 2 类 A=0 M=1 找到的第一个选中， 将所有经过页面的 A 置为 0</li><li>2 失败则重复 1，2</li></ol><p><strong>优点</strong>：减少磁盘 I/O 操作</p><p><strong>缺点：</strong>多次扫描</p><h1 id="其他置换算法"><a href="#其他置换算法" class="headerlink" title="其他置换算法"></a>其他置换算法</h1><ol><li><h2 id="最少使用（LFU，Least-Frequently-Used-）"><a href="#最少使用（LFU，Least-Frequently-Used-）" class="headerlink" title="最少使用（LFU，Least Frequently Used ）"></a>最少使用（<strong>LFU</strong>，<strong>Least Frequently Used</strong> ）</h2><ul><li><p><strong>当前为止访问最少</strong>的页面</p></li><li><p>设置访问计数器，访问时+1</p></li><li><p>发生缺页中断时，<strong>淘汰计数值最小的，并将所有计数清零</strong>（不现实）</p><p>设立移位寄存器 访问左边最高位置为 1，定期右移</p></li></ul><p> <strong>缺点</strong>：不能真正反映页面使用，因为一段时间间隔内，只是用寄存器的一位来记录页的使用情况</p></li><li><h2 id="页面缓冲算法（page-buffering）"><a href="#页面缓冲算法（page-buffering）" class="headerlink" title="页面缓冲算法（page buffering）"></a>页面缓冲算法（<strong>page buffering</strong>）</h2><p> 是对<strong>FIFO</strong>算法的发展，通过被置换页面的缓冲，有机会找回刚被</p><p> 置换的页面;</p><ul><li>为减少 I/O次数，一次置换多个页面</li><li>选择到要置换的页面时，先将它链接到某个链表（不回写的链到空闲链表；回写的链到已修改页面链表）；</li><li>当已修改页面的链表中页面个数达到一定数值时，才执行置换。</li><li>还有一个好处是，访问某个被选中换出的页面时，若还在内存的某个链表中，访问很快、简单。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> StudyNotes </category>
          
          <category> Operating System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS selectors I</title>
      <link href="/2020/04/17/CSS-Selectors-I/"/>
      <url>/2020/04/17/CSS-Selectors-I/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文根据 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Selectors" target="_blank" rel="noopener">MDN文档</a> 进行总结</p></blockquote><hr><h1 id="类型选择器（Type-selectors）"><a href="#类型选择器（Type-selectors）" class="headerlink" title="类型选择器（Type selectors）"></a>类型选择器（Type selectors）</h1><blockquote><p><strong>类型选择器</strong>，也叫“标签名选择器”或“元素选择器”，在文档中选择一个 HTML 标签。</p></blockquote><p>如：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">strong</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: rebeccapurple;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">em</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: rebeccapurple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="全局选择器（Universal-selector）"><a href="#全局选择器（Universal-selector）" class="headerlink" title="全局选择器（Universal selector）"></a>全局选择器（Universal selector）</h1><blockquote><p>全局选择器，是由一个星号（<code>*</code>）代指的，它选中了文档中的所有内容（或者是父元素中的所有内容，比如，它紧随在其他元素以及邻代运算符之后的时候）。</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用全局选择器、让选择器更易读"><a href="#使用全局选择器、让选择器更易读" class="headerlink" title="使用全局选择器、让选择器更易读"></a>使用全局选择器、让选择器更易读</h2><blockquote><p>全局选择器的一种用法是让选择器更易读，更明显地表明它们的作用。</p><p>例如，如果我想选中任何元素的第一子元素，不论它是什么元素，都给它加粗，我可以将<code>:first-child</code>选择器用作元素选择器的一个兄弟选择器：</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">article</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    select any &lt;article&gt; element that is the first child of another element.</span></span><br><span class="line"><span class="comment">    /*</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>但是这会和<code>article:first-child</code>混淆，而后者选择了作为其他元素的第一子元素的<code>&lt;article&gt;</code>元素。</p><p>为了避免这种混淆，我们可以向<code>:first-child</code>选择器加入全局选择器，这样选择器所做的事情很容易就能看懂。选择器正选中<code>&lt;article&gt;</code>元素的<em>任何</em>第一子元素：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">article</span> *<span class="selector-pseudo">:first-child</span> &#123; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     选中&lt;article&gt;元素的第一子元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="类选择器（Class-selectors）"><a href="#类选择器（Class-selectors）" class="headerlink" title="类选择器（Class selectors）"></a>类选择器（Class selectors）</h1><blockquote><p>类选择器以一个句点（<code>.</code>）开头，会选择文档中应用了这个类的所有物件。</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">选中所有类为 highlight 的标签</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.highlight</span>&#123;</span><br><span class="line">     <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指向特点元素的类"><a href="#指向特点元素的类" class="headerlink" title="指向特点元素的类"></a>指向特点元素的类</h2><blockquote><p>You can create a selector that will target specific elements with the class applied. </p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">选中类为 hightlight 的 span 元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">选中类为 hightlight 的 h1 元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多个类被应用的时候指向一个元素"><a href="#多个类被应用的时候指向一个元素" class="headerlink" title="多个类被应用的时候指向一个元素"></a>多个类被应用的时候指向一个元素</h2><p>你能对一个元素应用多个类，然后分别指向它们，或者仅仅在选择器中存在所有这些类的时候选择这一元素。在你的站点上，构建可以以不同方式组合起来的组件的时候，这会有用。为了告诉浏览器我们只想匹配带有所有这些类的元素，我们可以将这些类不加空格地连成一串。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.notebox</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.notebox</span><span class="selector-class">.warning</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid orange;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.notebox</span><span class="selector-class">.danger</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"notebox"</span>&gt;</span></span><br><span class="line">    This is an informational note.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"notebox warning"</span>&gt;</span></span><br><span class="line">    This note shows a warning.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"notebox danger"</span>&gt;</span></span><br><span class="line">    This note shows danger!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="ID-选择器（ID-selector）"><a href="#ID-选择器（ID-selector）" class="headerlink" title="ID 选择器（ID selector）"></a>ID 选择器（ID selector）</h1><p>ID选择器开头为<code>#</code>而非句点，不过基本上和类选择器是同种用法。可是在一篇文档中，一个ID只会用到一次。它能选中设定了<code>id</code>的元素，你能把ID放在类型选择器之前，只指向元素和ID都匹配的类。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">选择 id=one 的标签</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-id">#one</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">选择 id=heading 的 h1 标签</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-id">#heading</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: rebeccapurple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="属性选择器（Attribute-selectors）"><a href="#属性选择器（Attribute-selectors）" class="headerlink" title="属性选择器（Attribute selectors）"></a>属性选择器（Attribute selectors）</h1><h2 id="存在和值选择器（Presence-and-value-selectors）"><a href="#存在和值选择器（Presence-and-value-selectors）" class="headerlink" title="存在和值选择器（Presence and value selectors）"></a>存在和值选择器（Presence and value selectors）</h2><blockquote><p>These selectors enable the selection of an element based on the presence of an attribute alone (for example <code>href</code>), or on various different matches against the value of the attribute.</p></blockquote><table><thead><tr><th align="center">选择器</th><th align="center">示例</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>[attr]</code></td><td align="center"><code>a[title]</code></td><td align="center">匹配带有一个名为 <em>attr</em>的属性元素</td></tr><tr><td align="center"><code>[attr=value]</code></td><td align="center"><code>a[href=&quot;https://example.com&quot;]</code></td><td align="center">匹配带有一个名为 attr 且其值恰好为 value 的元素</td></tr><tr><td align="center"><code>[attr~=value]</code></td><td align="center"><code>p[class~=&quot;special&quot;]</code></td><td align="center">匹配具有 attr 属性的元素，且其值恰好是 value 或者在其（空格分隔）的值列表中包含 value</td></tr><tr><td align="center"><code>[attr</code>&#124;<code>=value]</code></td><td align="center"><code>div[lang</code>&#124;<code>=&#39;zh&#39;]</code></td><td align="center">匹配具有attr 属性的元素，该属性的值恰好是 value 或者以 value 开头，后跟连字符</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-attr">[class]</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">200%</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    匹配带有 class 属性的 li 元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-attr">[class=<span class="string">"a"</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    匹配带有值恰好为"a"的 class 属性的 li 元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-attr">[class~=<span class="string">"a"</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    匹配带有值恰好为"a"或值列表中包含"a"的 li 元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Attribute presence and value selectors<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"a b"</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"ab"</span>&gt;</span>Item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>By using <code>li[class]</code> we can match any selector with a class attribute. This matches all but the first list item.</li><li><code>li[class=&quot;a&quot;]</code> matches a selector with a class of <code>a</code>, but not a selector with a class of <code>a</code> with another space-separated class as part of the value. It selects the second list item.</li><li><code>li[class~=&quot;a&quot;]</code> will match a class of <code>a</code> but also a value that contains the class of <code>a</code>as part of a whitespace-separated list. It selects the second and third list items.</li></ul><hr><h2 id="子串匹配选择器（Substring-matching-selectors）"><a href="#子串匹配选择器（Substring-matching-selectors）" class="headerlink" title="子串匹配选择器（Substring matching selectors）"></a>子串匹配选择器（Substring matching selectors）</h2><blockquote><p>These selectors allow for more advanced matching of substrings inside the value of your attribute. For example, if you had classes of <code>box-warning</code> and <code>box-error</code> and wanted to match everything that started with the string “box-“, you could use <code>[class^=&quot;box-&quot;]</code> to select them both (or <code>[class|=&quot;box&quot;]</code> as described in section above).</p></blockquote><table><thead><tr><th align="center">Selector</th><th align="center">Example</th><th>Description</th></tr></thead><tbody><tr><td align="center"><code>[attr^=value]</code></td><td align="center"><code>li[class^=&quot;box-&quot;]</code></td><td>匹配具有 <em>attr</em> 属性（其名称是方括号中的值）的元素，该属性的值以 <em>value</em> 开头</td></tr><tr><td align="center"><code>[attr$=value]</code></td><td align="center"><code>li[class$=&quot;-box&quot;]</code></td><td>匹配具有 <em>attr</em>属性（其值以 value 结尾）的元素</td></tr><tr><td align="center"><code>[attr*=value]</code></td><td align="center"><code>li[class*=&quot;box&quot;]</code></td><td>匹配具有 <em>attr</em> 属性的元素，该属性在字符串中的任何位置都含有该值</td></tr></tbody></table><p>(Aside: It may help to note that <code>^</code> and <code>$</code> have long been used as <em>anchors</em> in so-called <em>regular expressions</em> to mean <em>begins with</em> and <em>ends with</em>.)（正则表达式的开头和结尾）</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-attr">[class^=<span class="string">"a"</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">200%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-attr">[class$=<span class="string">"a"</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-attr">[class*=<span class="string">"a"</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Attribute substring matching selectors<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"ab"</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"bca"</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"bcabc"</span>&gt;</span>Item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>li[class^=&quot;a&quot;]</code> matches any attribute value which starts with <code>a</code>, so matches the first two list items.</li><li><code>li[class$=&quot;a&quot;]</code> matches any attribute value that ends with <code>a</code>, so matches the first and third list item.</li><li><code>li[class*=&quot;a&quot;]</code> matches any attribute value where <code>a</code> appears anywhere in the string, so it matches all of our list items.</li></ul><hr><h2 id="区分大小写（Case-sensitivity）"><a href="#区分大小写（Case-sensitivity）" class="headerlink" title="区分大小写（Case-sensitivity）"></a>区分大小写（Case-sensitivity）</h2><blockquote><p>If you want to match attribute values case-insensitively you can use the value <code>i</code> before the closing bracket. This flag tells the browser to match ASCII characters case-insensitively. Without the flag the values will be matched according to the case-sensitivity of the document language — in HTML’s case it will be case sensitive.（使用<code>i</code>来使大小写不明感）</p></blockquote><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-attr">[class^=<span class="string">"a"</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    it only matches the first list item because the other two list items start with an uppercase A</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-attr">[class^=<span class="string">"a"</span> i]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    The second selector uses the case-insensitive flag and so matches all of the list items.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Case-insensitivity<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"A"</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"Ab"</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> StudyNotes </category>
          
          <category> WebDevelopment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> CSS selectors </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Optimal storage of disk files</title>
      <link href="/2020/04/09/Optimal-storage-of-disk-files/"/>
      <url>/2020/04/09/Optimal-storage-of-disk-files/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><blockquote><p>​    设磁盘上有$n$个文件$f1,f2,…,fn$，每个文件占用磁盘上的 1 个磁道。这n 个文件的检索概率分别是$p1,p2,…,pn$且 $$\sum_{i=1}^{n}pi = 1$$<br>磁头从当前磁道移到被检信息磁道所需的时间可用这两个磁道之间的径向距离来度量。如果文件 $fi$ 存放在第 $i(1≤i≤n)$ 道上，则检索这 n 个文件的期望时间是$$\sum_{1≤i≤j≤n}p_ip_jd(i,j)) $$。 式中，$d(i,j)$ 是第 $i$ 道与第 $i$ 道与第 $j$ 道之间的径向距离$|i-j|$.</p><p> 磁盘文件的最优存储问题要求确定这 $n$ 个文件在磁盘上的存储位置,使期望检索时间达到最小. 试设计一个解此问题的算法, 并分析算法的正确性和计算复杂性.</p></blockquote><blockquote><p><strong>算法设计:</strong> 对于给定的文件检索概率, 计算磁盘文件的最优存储方案.</p><p><strong>数据输入:</strong> 由文件 <code>input.txt</code> 给出输入数据. 第 1 行是正整数 $n$ , 表示文件个数. 第 2 行有 $n$ 个正整数 $a_i$ , 表示文件的检索概率. 实际上第 $k$ 个文件的检索概率应为<br>$$\frac{a_k}{\sum^n_{i=1}}$$</p><p><strong>结果输出:</strong> 将计算的最小期望检索时间输出到文件<code>output.txt</code></p></blockquote><hr><h1 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h1><p>本题采用贪心算法的策略,即满足以下两条性质:</p><ul><li>贪心选择性质</li><li>最优子结构</li></ul><h2 id="贪心选择性质"><a href="#贪心选择性质" class="headerlink" title="贪心选择性质"></a>贪心选择性质</h2><p>设: 文件列表中有这样的三个文件 $pi,pj,pk$</p><p>不妨设 $pi&lt;pj&lt;pk$</p><p>则这三个文件的排列顺序可能是:<br>$$<br>\begin{align}<br>\tag{1 升序} i&lt;j&lt;k \<br>\tag{2 $mid$最大} i&lt;k&lt;j \<br>\tag{3 降序} k&lt;j&lt;i \<br>\end{align}<br>$$<br>则这三个文件的期望检索时间$sum$为:<br>$$<br>sum =<br>\begin{cases}<br>\sum p_ip_jd(i,j) = p_i\cdot p_j\cdot (j-i) + p_j\cdot p_k\cdot (k-j)+p_i\cdot p_k\cdot(k-i)    &amp; when (1) \<br>\sum p_ip_jd(i,j) = p_i\cdot p_j\cdot (j-i) + p_j\cdot p_k\cdot (j-k)+p_i\cdot p_k\cdot(k-i)    &amp; when (2) \<br>\sum p_ip_jd(i,j) = p_i\cdot p_j\cdot (i-j) + p_j\cdot p_k\cdot (j-k)+p_i\cdot p_k\cdot(i-k)    &amp; when (3) \<br>\end{cases}<br>$$<br>显然当$k$位于中间位置时,$sum$最小. 那么每次选择检索概率最大的文件放入中间位置即可获得最优解.</p><h2 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h2><p>如果把最大概率的文件从中间磁道拿出，原本在左边或者在右边的向内进行紧凑操作，那么就得到了原问题的子问题，仍是最优的。</p><hr><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>问题的输入为一个 $n$，表示输入的文件数量。第二行输入 $n$ 个整数，表示该文件的检索概率。将 $n$ 个文件检索概率以从小到大的顺序进行排序。接下来就是调整数组结构使得中间值最大，向左右两个方向递减。$$\overleftarrow{p_1p_2p_3\cdots}pk\overrightarrow{\cdots p_{2k}p_{2k+1}}或  \overleftarrow{p_1p_2p_3\cdots}pk\overrightarrow{\cdots p_{2k}p_{2k}}$$ </p><p>得到了最优解数组,最后再进行迭代,求出最短期望时间.<br>$$<br>sum = p_1\cdotp p_2+p_1\cdot2p_3+\cdots+p_1\cdot(n-1)p_n \<br>\quad +p_2\cdot p_3 +p_3\cdot2p_4+\cdots+p2\cdot(n-2)p_n \<br>\quad +\cdots+ \<br>\quad +p_{n-2}\cdot p_{n-1} + p_{n-2}\cdot2p_n \<br>+p_{n-1}\cdot p_n<br>$$</p><ul><li><strong>算法优化</strong></li></ul><p>经过分析发现每一行的和与下一行具有规律. 先提取每一行的公因式：<br>$$<br>sum = p1\cdot(p_2+2p_3+\cdots+(n-1)p_n) \<br>+p2\cdot(p_3+2p_4+\cdots+(n-2)pn) \<br>+\cdots +\<br>+p_{n-2}(p_{n-1} + 2p_n) \<br>+p_{n-1}\cdot p_n<br>$$<br>记第 $i$行的和式为(提取公因式后的部分,即括号内的部分)为$sum_i$,<br>$$<br>sum_i = p_{i+1}+2p_{i+2}+\cdots+(n-1)p_n \<br>sum_{i-1} = p_i+2p{i+1}+\cdots+(n-(i-1))p_n \<br>两式相减得: sum_{i-1} - sum_i = p_i+p_{i+1}+\cdots+p_n \<br>记为 lastSum_i<br>$$<br>所以在进行最优解的计算时，可以从后往前进行计算，计算前一行的时候，可以利用已经计算的和式计算需要的本行和式，即$$sum_{i-1} = sum_{i}+lastSum_{i}$$</p><p>通过优化可以把算法的时间复杂度降低。</p><hr><h1 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h1><ul><li>优化前:</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># @para n        files number</span></span><br><span class="line"><span class="comment"># @para filesP   a list of files's retrieval probability</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diskSave</span><span class="params">(n: int, filesP: List[int])</span> -&gt; float:</span> </span><br><span class="line">    filesP.sort()  <span class="comment"># 先进行从小到大的排序</span></span><br><span class="line">    <span class="comment"># 开辟两个空间</span></span><br><span class="line">    files1 = [] <span class="comment"># files1存放index为2k的元素 (k=0,1,2...)</span></span><br><span class="line">    files2 = [] <span class="comment"># files2存放index为2k+1的元素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(filesP), <span class="number">2</span>): <span class="comment"># 对 filesP 进行遍历，将奇、偶下标的元素分开存放</span></span><br><span class="line">        files1.append(filesP[i])</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(filesP): <span class="comment"># 进行一步判断，防止数组越界</span></span><br><span class="line">            files2.append(filesP[i + <span class="number">1</span>])</span><br><span class="line">    files = files1 + reversed(files2) <span class="comment"># 将数组一和数组二的逆序进行拼接，得到文件存放的磁道位置的最优解</span></span><br><span class="line">    <span class="comment"># 进行累加返回结果</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(files)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(files)):</span><br><span class="line">            ans += files[i] * files[j] * (j - i)</span><br><span class="line">    <span class="keyword">return</span> ans / sum(files) / sum(files)</span><br></pre></td></tr></table></figure><ul><li>优化后</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diskSave</span><span class="params">(n: int, filesP: List[int])</span> -&gt; float:</span></span><br><span class="line">    filesP.sort()  <span class="comment"># 先进行从小到大的排序</span></span><br><span class="line">    <span class="comment"># print(filesP)</span></span><br><span class="line">    files1 = []  <span class="comment"># files1存放index为2k的元素 (k=0,1,2...)</span></span><br><span class="line">    files2 = []  <span class="comment"># files2存放index为2k+1的元素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(filesP), <span class="number">2</span>):  <span class="comment"># 对 filesP 进行遍历，将奇、偶下标的元素分开存放</span></span><br><span class="line">        files1.append(filesP[i])</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(filesP):  <span class="comment"># 进行一步判断，防止数组越界</span></span><br><span class="line">            files2.append(filesP[i + <span class="number">1</span>])</span><br><span class="line">    files = files1 + files2[::<span class="number">-1</span>]  <span class="comment"># 将数组一和数组二的逆序进行拼接，得到文件存放的磁道位置的最优解</span></span><br><span class="line">    <span class="comment"># print(files)</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="comment"># for i in range(len(files)):</span></span><br><span class="line">    <span class="comment">#     for j in range(i + 1, len(files)):</span></span><br><span class="line">    <span class="comment">#         ans += files[i] * files[j] * (j - i)</span></span><br><span class="line">    lastSum = <span class="number">0</span></span><br><span class="line">    psum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(files) - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        psum += files[i + <span class="number">1</span>] <span class="comment"># 通过优化把迭代部分降低为 O(n)</span></span><br><span class="line">        lastSum += psum</span><br><span class="line">        ans += files[i] * lastSum</span><br><span class="line">    <span class="keyword">return</span> ans / sum(files) / sum(files)</span><br></pre></td></tr></table></figure><hr><h1 id="用例设计"><a href="#用例设计" class="headerlink" title="用例设计"></a>用例设计</h1><table><thead><tr><th align="center">输入</th><th align="center">输出</th></tr></thead><tbody><tr><td align="center">5<br>  33  55 22 11 9</td><td align="center">0.547396</td></tr><tr><td align="center">1<br>  12</td><td align="center">0.000000</td></tr><tr><td align="center">2<br>  12  13</td><td align="center">0.249600</td></tr><tr><td align="center">7<br>  849  129 106 374 776 597 667</td><td align="center">0.813162</td></tr><tr><td align="center">4<br>  625  44 862 895</td><td align="center">0.443049</td></tr><tr><td align="center">5<br>  807  489 668 306 308</td><td align="center">0.658347</td></tr></tbody></table><hr><h1 id="算法复杂度分析"><a href="#算法复杂度分析" class="headerlink" title="算法复杂度分析"></a>算法复杂度分析</h1><p>由算法分析，对文件检索概率的数组进行排序需要的时间复杂度为$O(nlogn)$,对最优解数组进行迭代相加得出结果的时间复杂度为$O(n^2)$</p><p>综上分析：算法的时间复杂度为$O(n^2)$</p><p>由于开了辅助的数组来存放最优解，空间复杂度为$O(n)$</p><p><strong>优化后算法时间复杂度为$O(nlogn)$</strong></p><h2 id="设计测试数据表格"><a href="#设计测试数据表格" class="headerlink" title="设计测试数据表格"></a>设计测试数据表格</h2><table><thead><tr><th><strong>编号</strong></th><th><strong>文件数量</strong> <strong>n</strong></th><th><strong>运行时间（s）</strong></th><th><strong>优化运行时间(s)</strong></th></tr></thead><tbody><tr><td><strong>1</strong></td><td>5</td><td>0.0000191</td><td>0.0000110</td></tr><tr><td><strong>2</strong></td><td>10</td><td>0.0000169</td><td>0.0000091</td></tr><tr><td><strong>3</strong></td><td>20</td><td>0.0000577</td><td>0.0000122</td></tr><tr><td><strong>4</strong></td><td>50</td><td>0.0002933</td><td>0.0000272</td></tr><tr><td><strong>5</strong></td><td>100</td><td>0.0010099</td><td>0.0000489</td></tr><tr><td><strong>6</strong></td><td>200</td><td>0.0039928</td><td>0.0001600</td></tr><tr><td><strong>7</strong></td><td>400</td><td>0.0160909</td><td>0.0002589</td></tr><tr><td><strong>8</strong></td><td>500</td><td>0.0248058</td><td>0.0004241</td></tr><tr><td><strong>9</strong></td><td>700</td><td>0.0411451</td><td>0.0004101</td></tr><tr><td><strong>10</strong></td><td>1000</td><td>0.0829501</td><td>0.0005181</td></tr><tr><td><strong>11</strong></td><td>2000</td><td>0.3404040</td><td>0.0014789</td></tr><tr><td><strong>12</strong></td><td>2500</td><td>0.5389400</td><td>0.0014591</td></tr><tr><td><strong>13</strong></td><td>5000</td><td>2.1901119</td><td>0.0038669</td></tr><tr><td><strong>14</strong></td><td>7500</td><td>4.8620002</td><td>0.0072081</td></tr><tr><td><strong>15</strong></td><td>10000</td><td>8.4792311</td><td>0.0085330</td></tr></tbody></table><h2 id="用-Numbers-作出图像"><a href="#用-Numbers-作出图像" class="headerlink" title="用 Numbers 作出图像"></a>用 Numbers 作出图像</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/jzhmcoo1/jzhmcoo1picrepo/raw/master/img/image-20200410222559138.png" alt="image-20200410222559138"></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/jzhmcoo1/jzhmcoo1picrepo/raw/master/img/image-20200410222617187.png" alt="image-20200410222617187"></p><p>图像符合算法的时间复杂度分析</p><p>可以看出优化后的时间性能提示非常明显.</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li><p>问题是否满足贪心选择性质，指整体的最优解可以通过一系列局部最优的选择，即贪心选择来得到，这也是贪心算法与动态规划算法的主要区别。必须证明每一步所作的贪心选择最终能找到整体最优解。</p></li><li><p>最优子结构性质，即一个问题的最优解包含其子问题的最优解。问题的最优子结构性质是该问题可用动态规划算法或贪心算法求解的关键特征。</p></li></ol><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><ul><li>Python源代码实现</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@para n        files number</span></span><br><span class="line"><span class="string">@para filesP   a list of files's retrieval probability</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diskSave</span><span class="params">(n: int, filesP: List[int])</span> -&gt; float:</span></span><br><span class="line">    filesP.sort()  <span class="comment"># 先进行从小到大的排序</span></span><br><span class="line">    <span class="comment"># print(filesP)</span></span><br><span class="line">    files1 = []  <span class="comment"># files1存放index为2k的元素 (k=0,1,2...)</span></span><br><span class="line">    files2 = []  <span class="comment"># files2存放index为2k+1的元素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(filesP), <span class="number">2</span>):  <span class="comment"># 对 filesP 进行遍历，将奇、偶下标的元素分开存放</span></span><br><span class="line">        files1.append(filesP[i])</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(filesP):  <span class="comment"># 进行一步判断，防止数组越界</span></span><br><span class="line">            files2.append(filesP[i + <span class="number">1</span>])</span><br><span class="line">    files = files1 + files2[::<span class="number">-1</span>]  <span class="comment"># 将数组一和数组二的逆序进行拼接，得到文件存放的磁道位置的最优解</span></span><br><span class="line">    <span class="comment"># print(files)</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(files)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(files)):</span><br><span class="line">            ans += files[i] * files[j] * (j - i)</span><br><span class="line">    <span class="keyword">return</span> ans / sum(files) / sum(files)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">'----开始读取输入文件----'</span>)</span><br><span class="line">        input = open(<span class="string">'4-4data.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'----读取失败----'</span>)</span><br><span class="line">        print(<span class="string">'Error:'</span>, e)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'----读取成功----'</span>)</span><br><span class="line">        line = input.readline()</span><br><span class="line">        <span class="keyword">while</span> line:</span><br><span class="line">            n = int(line)</span><br><span class="line">            line = input.readline()</span><br><span class="line">            files = list(map(int, line.split()))</span><br><span class="line">            start = time()</span><br><span class="line">            ans = diskSave(n, files)</span><br><span class="line">            end = time()</span><br><span class="line">            print(<span class="string">'最小期望检索时间为: %10.6f'</span> % ans)</span><br><span class="line">            print(<span class="string">'本次程序执行时间为: %10.7f seconds'</span> % (end - start))</span><br><span class="line">            line = input.readline()</span><br><span class="line">            <span class="keyword">while</span> line == <span class="string">'\n'</span>:</span><br><span class="line">                line = input.readline()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">'----操作完成,关闭文件----'</span>)</span><br><span class="line">        input.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><ul><li>优化后</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@para n        files number</span></span><br><span class="line"><span class="string">@para filesP   a list of files's retrieval probability</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diskSave</span><span class="params">(n: int, filesP: List[int])</span> -&gt; float:</span></span><br><span class="line">    filesP.sort()  <span class="comment"># 先进行从小到大的排序</span></span><br><span class="line">    <span class="comment"># print(filesP)</span></span><br><span class="line">    files1 = []  <span class="comment"># files1存放index为2k的元素 (k=0,1,2...)</span></span><br><span class="line">    files2 = []  <span class="comment"># files2存放index为2k+1的元素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(filesP), <span class="number">2</span>):  <span class="comment"># 对 filesP 进行遍历，将奇、偶下标的元素分开存放</span></span><br><span class="line">        files1.append(filesP[i])</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(filesP):  <span class="comment"># 进行一步判断，防止数组越界</span></span><br><span class="line">            files2.append(filesP[i + <span class="number">1</span>])</span><br><span class="line">    files = files1 + files2[::<span class="number">-1</span>]  <span class="comment"># 将数组一和数组二的逆序进行拼接，得到文件存放的磁道位置的最优解</span></span><br><span class="line">    <span class="comment"># print(files)</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="comment"># for i in range(len(files)):</span></span><br><span class="line">    <span class="comment">#     for j in range(i + 1, len(files)):</span></span><br><span class="line">    <span class="comment">#         ans += files[i] * files[j] * (j - i)</span></span><br><span class="line">    lastSum = <span class="number">0</span></span><br><span class="line">    psum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(files) - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        psum += files[i + <span class="number">1</span>] <span class="comment"># 通过优化把迭代部分降低为 O(n)</span></span><br><span class="line">        lastSum += psum</span><br><span class="line">        ans += files[i] * lastSum</span><br><span class="line">    <span class="keyword">return</span> ans / sum(files) / sum(files)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">'----开始读取输入文件----'</span>)</span><br><span class="line">        input = open(<span class="string">'4-4data.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'----读取失败----'</span>)</span><br><span class="line">        print(<span class="string">'Error:'</span>, e)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'----读取成功----'</span>)</span><br><span class="line">        line = input.readline()</span><br><span class="line">        <span class="keyword">while</span> line:</span><br><span class="line">            n = int(line)</span><br><span class="line">            line = input.readline()</span><br><span class="line">            files = list(map(int, line.split()))</span><br><span class="line">            start = time()</span><br><span class="line">            ans = diskSave(n, files)</span><br><span class="line">            end = time()</span><br><span class="line">            print(<span class="string">'最小期望检索时间为: %10.6f'</span> % ans)</span><br><span class="line">            print(<span class="string">'本次程序执行时间为: %10.7f seconds'</span> % (end - start))</span><br><span class="line">            line = input.readline()</span><br><span class="line">            <span class="keyword">while</span> line == <span class="string">'\n'</span>:</span><br><span class="line">                line = input.readline()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">'----操作完成,关闭文件----'</span>)</span><br><span class="line">        input.close()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Assignment </category>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> greedy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Document and website structure</title>
      <link href="/2020/04/01/Document-and-website-structure/"/>
      <url>/2020/04/01/Document-and-website-structure/</url>
      
        <content type="html"><![CDATA[<h1 id="Document-and-website-structure"><a href="#Document-and-website-structure" class="headerlink" title="Document and website structure"></a>Document and website structure</h1><h2 id="Written-in-front"><a href="#Written-in-front" class="headerlink" title="Written in front"></a>Written in front</h2><p>Recently, I’ve been reading this article. And I  just started learning HTML . I don’t know much about HTML tags, and liked using <code>&lt;div&gt;</code>s a lot, which made me almost crazy maintaining my website. </p><p>The article is great. It’s easy for me, a greenhorn in web development to understand. It clearly tells the functions of these tags, and when to use it. I read the English version on <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure" target="_blank" rel="noopener">MDN</a>, and make some note in it for better understanding, and for learning English.</p><blockquote><p>Original Article:  <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure" target="_blank" rel="noopener">MDN</a></p></blockquote><hr><blockquote><p>In addition to defining individual parts of your page (such as “a paragrapgh” or “an image”),</p><p>HTML also boasts a number of block level elements used to define areas of your website (such as “the header”, “the navigation menu”, “the main content column”).</p><p>This article looks into how to plan a basic website struture, and write the HTML to represent this structure.</p></blockquote><h2 id="Basic-section-of-a-document"><a href="#Basic-section-of-a-document" class="headerlink" title="Basic section of a document"></a>Basic section of a document</h2><p>Webpages can and will look pretty different from one another, but they all tend to share similar standard components, unless the page is displaying a fullscreen video or game, is part of some kind of art project, or is just badly structured.</p><ul><li>header</li><li>navigation bar</li><li>Main content</li><li>sidebar</li><li>footer</li></ul><h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>Usually a big strip across the top with a big heading, logo, and perhaps a ==tagline（品牌口号标语）==. This usually stays the same from one webpage to another.</p><h3 id="navigation-bar"><a href="#navigation-bar" class="headerlink" title="navigation bar:"></a>navigation bar:</h3><p>Links to the site’s main sections; usually represented by menu buttons, links, or tabs. Like the header, this content usually remains consistent from one webpage to another — having inconsistent navigation on your website will just lead to confused, frustrated users. </p><h3 id="Main-content"><a href="#Main-content" class="headerlink" title="Main content"></a>Main content</h3><p>A big area in the center that contains most of the unique content of a given webpage, for example, the video you want to watch, or the main story you’re reading, or the map you want to view, or the news headlines, etc. This is the one part of the website that definitely will vary from page to page!</p><h3 id="Sidebar"><a href="#Sidebar" class="headerlink" title="Sidebar"></a>Sidebar</h3><p>Some ==peripheral（外部的）== info, links, quotes, ads, etc. Usually, this is contextual to what is contained in the main content (for example on a news article page, the sidebar might contain the author’s bio, or links to related articles) but there are also cases where you’ll find some recurring elements like a secondary navigation system.</p><h3 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h3><p>A strip across the bottom of the page that generally contains fine print, copyright notices, or contact info. It’s a place to put common information (like the header) but usually, that information is not critical or secondary to the website itself. The footer is also sometimes used for SEO purposes, by providing links for quick access to popular content.</p><h2 id="HTML-for-structuring-content"><a href="#HTML-for-structuring-content" class="headerlink" title="HTML for structuring content"></a>HTML for structuring content</h2><p>With the right CSS, you could use pretty much any elements to wrap around the different sections and get it looking how you wanted, but as discussed before, we need to respect ==semantics（语义）== and <strong>use the right element for the right job</strong>.</p><p>This is because visuals don’t tell the whole story. We use color and font size to draw sighted users’ attention to the most useful parts of the content, like the navigation menu and related links, but what about ==visually impaired people(视障者)== for example, who might not find concepts like “pink” and “large font” very useful?</p><p>In your HTML code, you can mark up sections of content based on their <em>functionality</em> — you can use elements that represent the sections of content described above ==unambiguously（明确地）==, and ==assistive（辅助的）== technologies like screenreaders can recognise those elements and help with tasks like “find the main navigation”, or “find the main content.” As we mentioned earlier in the course, there are a number of <a href="https://developer.mozilla.org/en-US/Learn/HTML/Introduction_to_HTML/HTML_text_fundamentals#Why_do_we_need_structure" target="_blank" rel="noopener">consequences of not using the right element structure and semantics for the right job</a>.</p><p>To implement such semantic mark up, HTML provides dedicated tags that you can use to represent such sections, for example:</p><ul><li><strong>header:</strong><code>&lt;header&gt;</code></li><li><strong>navigation bar:</strong><code>&lt;nav&gt;</code></li><li><strong>main content</strong>:<code>&lt;main&gt;</code>, with various content ==subsections（小节）== represented by <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, and <code>&lt;div&gt;</code> elements.</li><li><strong>sidebar:</strong><code>&lt;aside&gt;</code>, often placed inside <code>&lt;main&gt;</code>.</li><li><strong>footer:</strong><code>&lt;footer&gt;</code>.</li></ul><blockquote><p>An example</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My page title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300|Sonsie+One"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- the below three lines are a fix to get HTML5 semantic elements working in old versions of Internet Explorer--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;![endif]--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Here is our main header that is used across all the pages of our website --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Our team<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Projects<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- A Search form is another commmon non-linear way to navigate through a website. --&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">name</span>=<span class="string">"q"</span> <span class="attr">placeholder</span>=<span class="string">"Search query"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Go!"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Here is our page's main content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- It contains an article --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Article heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Donec a diam lectus. Set sit amet ipsum mauris. Maecenas congue ligula as quam viverra nec consectetur ant hendrerit. Donec et mollis dolor. Praesent et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt congue enim, ut porta lorem lacinia consectetur.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Subsection<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Donec ut librero sed accu vehicula ultricies a non tortor. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aenean ut gravida lorem. Ut turpis felis, pulvinar a semper sed, adipiscing id dolor.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Pelientesque auctor nisi id magna consequat sagittis. Curabitur dapibus, enim sit amet elit pharetra tincidunt feugiat nist imperdiet. Ut convallis libero in urna ultrices accumsan. Donec sed odio eros.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Another subsection<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. Cum soclis natoque penatibus et manis dis parturient montes, nascetur ridiculus mus. In rutrum accumsan ultricies. Mauris vitae nisi at sem facilisis semper ac in est.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Vivamus fermentum semper porta. Nunc diam velit, adipscing ut tristique vitae sagittis vel odio. Maecenas convallis ullamcorper ultricied. Curabitur ornare, ligula semper consectetur sagittis, nisi diam iaculis velit, is fringille sem nunc vet mi.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- the aside content can also be nested within the main content --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Related<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Oh I do like to be beside the seaside<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Oh I do like to be beside the sea<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Although in the North of England<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>It never stops raining<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Oh well...<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- And here is our main footer that is used across all the pages of our website --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>©Copyright 2050 by nobody. All rights reversed.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We aren’t asking you to do much else in this article, because <strong>the key to understanding document layout is writing a sound HTML structure, and then laying it out with CSS.</strong> </p><h2 id="HTML-layout-elements-in-more-detail"><a href="#HTML-layout-elements-in-more-detail" class="headerlink" title="HTML layout elements in more detail"></a>HTML layout elements in more detail</h2><ul><li><p><code>&lt;main&gt;</code> is for content <em>unique to this page</em>. Use <code>&lt;main&gt;</code> only once per page, and put it directly inside <code>&lt;body&gt;</code>. Ideally this shouldn’t be nested within other elements.</p></li><li><p><code>&lt;article&gt;</code> encloses a block of related content that makes sense on its own without the rest of the page (e.g., a single blog post).</p></li><li><p><code>&lt;section&gt;</code> is similar to <code>&lt;article&gt;</code>, but it is more for grouping together a single part of the page that ==constitutes one single piece of functionality== (e.g., a mini map, or a set of article headlines and summaries). It’s considered best practice to begin each section with a heading; also note that you can break <code>&lt;article&gt;</code>s up into different <code>&lt;section&gt;</code>s, or <code>&lt;section&gt;</code>s up into different <code>&lt;article&gt;</code>s,depending on the context.</p></li><li><p><code>&lt;aside&gt;</code> contains content that is not directly related to the main content but can provide addtional information indirectly related to it (==glossary entries(词汇表条目)==, ==author biography(作者传记)==, related links, etc.).</p></li><li><p><code>&lt;header&gt;</code> represents a group of introductory content. If it is a child of <code>&lt;body&gt;</code> it defines the global header of a webpage, but if it’s a child of an <code>&lt;article&gt;</code> or <code>&lt;section&gt;</code> it defines a specific header for that section (try not to confuse this with titles and headings).</p></li><li><p><code>&lt;nav&gt;</code> contains the main navigation functionally for the page.</p><p>  Secondary links, etc., would not go in the navigation.</p></li><li><p><code>&lt;footer&gt;</code>represents a group of end content for a page.</p></li></ul><h2 id="Non-semantic-wrappers"><a href="#Non-semantic-wrappers" class="headerlink" title="Non-semantic wrappers"></a>Non-semantic wrappers</h2><p>Sometimes you’ll come across a situation where you can’t find an ideal semantic element to group some items together or wrap some content. Sometimes you might want to just group a set of elements together to affect them all as a single entity with some CSS or JavaScript. For cases like these, HTML provides the <code>&lt;div&gt;</code> and <code>&lt;span&gt;</code> elements. You should use these preferably with a suitable class attribute, to provide some kind of label for them so they can be easily targeted.</p><p><code>&lt;span&gt;</code>  is an inline non-semantic element, which you should only use if you can’t think of a better semantic text element to wrap your content, or don’t want to add any specific meaning. For example:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The King walked drunkenly back to his room at 01:00, the beer doing nothing to aid</span><br><span class="line">him as he staggered through the door <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"editor-note"</span>&gt;</span>[Editor's note: At this point in the</span><br><span class="line">play, the lights should be down low]<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>In this case, the editor’s note is supposed to merely provide extra direction for the director of the play; it is not supposed to have extra semantic meaning. For sighted users, CSS would perhaps be used to distance the note slightly from the main text.</p><p><code>&lt;div&gt;</code> is a block level non-semantic element, which you should only use if you can’t think of a better semantic block element to use, or don’t want to add any specific meaning. For example, imagine a shopping cart widget that you could choose to pull up at any point during your time on an e-commerce site:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shopping-cart"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Shopping cart<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Silver earrings<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>: $99.95.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../products/3333-0985/thumb.png"</span> <span class="attr">alt</span>=<span class="string">"Silver earrings"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Total cost: $237.89<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>This isn’t really an <code>&lt;aside&gt;</code>, as it doesn’t necessarily relate to the main content of the page (you want it viewable from anywhere). It doesn’t even particularly warrant using a <code>&lt;section&gt;</code>, as it isn’t part of the main content of the page. So a <code>&lt;div&gt;</code> is fine in this case. </p><blockquote><p><strong>Warning</strong>: Divs are so convenient to use that it’s easy to use them too much. As they carry no semantic value, they just ==clutter(混乱）== your HTML code. Take care to use them only when there is no better semantic solution and try to reduce their usage to the minimum otherwise you’ll have a hard time updating and maintaining your documents.</p></blockquote><h2 id="Line-breaks-and-horizontal-rules"><a href="#Line-breaks-and-horizontal-rules" class="headerlink" title="Line breaks and horizontal rules"></a>Line breaks and horizontal rules</h2><p>Two elements that you’ll use occasionally and will want to know about are <code>&lt;br&gt;</code> and <code>&lt;hr&gt;</code>:</p><p><code>&lt;br&gt;</code> creates a line break in a paragraph; it is the only way to force a ==rigid structure（刚性结构）== in a situation where you want a series of fixed short lines, such as in a postal address or a poem. For example:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>There once was a man named O'Dell<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Who loved to write HTML<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">But his structure was bad, his semantics were sad<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">and his markup didn't read very well.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Without the <code>&lt;br&gt;</code> elements, the paragraph would just be rendered in one long line (HTML ignores most whitespace); with <code>&lt;br&gt;</code> elements in the code, the markup renders like this:</p><blockquote><p>There once was a man named O’Dell<br>Who loved to write HTML<br>But his structure was bad, his semantics were sad<br>and his markup didn’t read very well.</p></blockquote><p><code>&lt;hr&gt;</code> elements create a horizontal rule in the document that ==denotes a thematic change（表示主题变化）== in the text (such as a change in topic or scene)。</p><h2 id="Planning-a-simple-website"><a href="#Planning-a-simple-website" class="headerlink" title="Planning a simple website"></a>Planning a simple website</h2><p>Once you’ve planned out the structure of a simple webpage, the next logical step is to try to work out what content you want to put on a whole website, what pages you need, and how they should be arranged and link to one another for the best possible user experience. This is called <a href="https://developer.mozilla.org/en-US/docs/Glossary/Information_architecture" target="_blank" rel="noopener">Information architecture</a>. In a large, complex website, a lot of planning can go into this process, but for a simple website of a few pages, this can be fairly simple, and fun!</p><ol><li>Bear in mind that you’ll have a few elements common to most (if not all) pages — such as the navigation menu, and the footer content. If your site is for a business, for example, it’s a good idea to have your contact information available in the footer on each page. Note down what you want to have common to every page.</li><li>Next, draw a rough sketch of what you might want the structure of each page to look like (it might look like our simple website above). Note what each block is going to be.</li><li>Now, brainstorm all the other (not common to every page) content you want to have on your website — write a big list down.</li><li>Next, try to sort all these content items into groups, to give you an idea of what parts might ==live together on different pages（在不同页面上一起显示）==. This is very similar to a technique called <a href="https://developer.mozilla.org/en-US/docs/Glossary/Card_sorting" target="_blank" rel="noopener">Card sorting</a>.(卡片分类)</li><li>Now try to sketch a rough sitemap — have a bubble for each page on your site, and draw lines to show the typical workflow between pages. The homepage will probably be in the center, and link to most if not all of the others; most of the pages in a small site should be available from the main navigation, although there are exceptions. You might also want to include notes about how things might be presented.</li></ol>]]></content>
      
      
      <categories>
          
          <category> StudyNotes </category>
          
          <category> WebDevelopment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Document structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computation&#39;s Assignment</title>
      <link href="/2020/03/31/Computation-s-Assignment/"/>
      <url>/2020/03/31/Computation-s-Assignment/</url>
      
        <content type="html"><![CDATA[<h2 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h2><blockquote><p>Add the following pairs of 6-bit two’s complement binary numbers, and give the signed decimal value of the the 6-bit result. Note whether or not an overflow occurred for any addition.</p><ul><li><p>2’s Complement Binary: </p></li><li><p>Signed Decimal:</p></li><li><p>Overflow?</p></li></ul></blockquote><h3 id="1"><a href="#1" class="headerlink" title="1)"></a>1)</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">     011 001</span></span><br><span class="line"><span class="bullet">   + </span>001 011</span><br><span class="line">   -----------</span><br><span class="line"><span class="code">     100 100</span></span><br><span class="line">2's Complement Binary: 100100</span><br><span class="line">Signed Decimal: -28</span><br><span class="line">Overflow: yes</span><br></pre></td></tr></table></figure><hr><h3 id="2"><a href="#2" class="headerlink" title="2)"></a>2)</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">    011 001</span></span><br><span class="line"><span class="bullet">  + </span>110 100</span><br><span class="line">  -----------</span><br><span class="line">   1001 101</span><br><span class="line">2's Complement Binary: 001101</span><br><span class="line">Signed Decimal: +13</span><br><span class="line">Overflow: no</span><br></pre></td></tr></table></figure><h3 id="3）"><a href="#3）" class="headerlink" title="3）"></a>3）</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">    110 110</span></span><br><span class="line"><span class="bullet">  + </span>011 100</span><br><span class="line">  -----------</span><br><span class="line">   1010 010</span><br><span class="line">2's Complement Binary: 010010</span><br><span class="line">Signed Decimal: +18</span><br><span class="line">Overflow: no</span><br></pre></td></tr></table></figure><h3 id="4"><a href="#4" class="headerlink" title="4)"></a>4)</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">    100 010</span></span><br><span class="line"><span class="bullet">  + </span>110 101</span><br><span class="line">  -----------</span><br><span class="line">   1010 111</span><br><span class="line">2's Complement Binary: 010111</span><br><span class="line">Signed Decimal: +23</span><br><span class="line">Overflow: yes</span><br></pre></td></tr></table></figure><hr><h2 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h2><blockquote><p>Write the base 10 number $−1.05675 × 10^3$ as a 32-bit, IEEE normalized floating point number with biased exponent.</p><table><thead><tr><th align="center">31</th><th align="center">30</th><th align="center">29</th><th align="center">28</th><th align="center">27</th><th align="center">26</th><th align="center">25</th><th align="center">24</th><th align="center">23</th><th align="center">22</th><th align="center">21</th><th align="center">20</th><th align="center">19</th><th align="center">18</th><th align="center">17</th><th align="center">16</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="center">15</th><th align="center">14</th><th align="center">13</th><th align="center">12</th><th align="center">11</th><th align="center">10</th><th align="center">9</th><th align="center">8</th><th align="center">7</th><th align="center">6</th><th align="center">5</th><th align="center">4</th><th align="center">3</th><th align="center">2</th><th align="center">1</th><th align="center">0</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table></blockquote><p>The original number is: $-1056.75 = -(2^{10}+2^5+2^{-1}+2^{-2})$</p><p>convert to binary: $10000100000.11 = 1.00001\underbrace{00000}<em>{5 times}11 \times 2^{10} $<br>$$<br>\text{The original number is}\rightarrow -1056.75 = -(2^{10}+2^5+2^{-1}+2^{-2}) \<br>\text{convert to binary }\rightarrow 10000100000.11 = 1.00001\underbrace{00000}</em>{5 times}11 \times 2^{10} \<br>\therefore e = 10 \<br>\therefore s = 1,E = e+127 = 137, \<br>\therefore M = 00001\underbrace{00000}<em>{5 times}11 \underbrace{00000000000}</em>{11 times}<br>$$<br>Finally, fill the blanks with the answer:</p><blockquote><table><thead><tr><th align="center">31</th><th align="center">30</th><th align="center">29</th><th align="center">28</th><th align="center">27</th><th align="center">26</th><th align="center">25</th><th align="center">24</th><th align="center">23</th><th align="center">22</th><th align="center">21</th><th align="center">20</th><th align="center">19</th><th align="center">18</th><th align="center">17</th><th align="center">16</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><table><thead><tr><th align="center">15</th><th align="center">14</th><th align="center">13</th><th align="center">12</th><th align="center">11</th><th align="center">10</th><th align="center">9</th><th align="center">8</th><th align="center">7</th><th align="center">6</th><th align="center">5</th><th align="center">4</th><th align="center">3</th><th align="center">2</th><th align="center">1</th><th align="center">0</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr></tbody></table></blockquote><hr><h2 id="Question-3"><a href="#Question-3" class="headerlink" title="Question 3"></a>Question 3</h2><blockquote><p>Complete the following table, showing the sign &amp; magnitude and the corre- sponding biased representations with a bias of 127.</p><table><thead><tr><th align="center">Sign &amp; Magnitude</th><th align="center">Biased</th></tr></thead><tbody><tr><td align="center">64</td><td align="center"></td></tr><tr><td align="center">-15</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">100</td></tr><tr><td align="center"></td><td align="center">200</td></tr></tbody></table></blockquote><p>Fill the table with Magnitude + 127 &amp; Biased - 127.</p><table><thead><tr><th align="center">Sign &amp; Magnitude</th><th align="center">Biased</th></tr></thead><tbody><tr><td align="center">64</td><td align="center">191</td></tr><tr><td align="center">-15</td><td align="center">112</td></tr><tr><td align="center">-27</td><td align="center">100</td></tr><tr><td align="center">73</td><td align="center">200</td></tr></tbody></table><h2 id="Question-4"><a href="#Question-4" class="headerlink" title="Question 4"></a>Question 4</h2><blockquote><p>Add the following pair of 4-bit floating point numbers using a 4-bit adder to add the significands, first assuming that you retain one additional bit for rounding and then assuming that you do not retain one extra bit for rounding. Assume that you round up.</p><p>$$1.100 × 2^7 + 1.110 × 2^5$$</p><p>Answer with extra bit:</p><p>Answer without extra bit:</p></blockquote><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">  110 000  </span><br><span class="line"><span class="bullet">+   </span>1 111</span><br><span class="line">----------</span><br><span class="line">  111.110</span><br></pre></td></tr></table></figure><p>So:<br>$$<br>\text{Answer with extra bit: } 1.1111 \times 2^7 \<br>\text{Answer with extra bit: } 1.111 \times 2^7<br>$$</p><h2 id="Question-5"><a href="#Question-5" class="headerlink" title="Question 5"></a>Question 5</h2><blockquote><p>Multiply the following pair of 4-bit floating point numbers.</p><p>Assume that the exponents are unbiased, and you do not need to show how to work with biased exponents and you do not need to convert to decimal. You may also ignore the issues of overflow, underflow, and “additional bits”. Instead, keep full precision while computing the product, and keep full precision until the rounding step. Your result should only have 4 bits of significand.<br>$$<br>−1.001×2^8 ∗ 1.100×2^9<br>$$</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    1001</span><br><span class="line"> ×  1100</span><br><span class="line">-----------</span><br><span class="line">    0000</span><br><span class="line">   0000</span><br><span class="line">  1001</span><br><span class="line"> 1001</span><br><span class="line">------------</span><br><span class="line"> 1101100</span><br></pre></td></tr></table></figure><p>So:<br>$$<br>−1.001×2^8 ∗ 1.100×2^9 = -1.101 \times 2^{17}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> Assignment </category>
          
          <category> Computer composition and structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最优时间表问题</title>
      <link href="/2020/03/26/Optimal-Timetable/"/>
      <url>/2020/03/26/Optimal-Timetable/</url>
      
        <content type="html"><![CDATA[<h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h1><blockquote><p>一台精密仪器的工作时间为$n$个时间单位。与仪器工作时间同步进行若干仪器维修程序。一旦启动维修程序，仪器必须进入维修程序。如果只有一个维修程序启动，则必须进入该维修程序。如果在同一时刻有多个维修程序，可任选进入其中的一个维修程序。维修程序必须从头开始，不能中间插入。一个维修程序从第$s$个时间单位开始，持续$t$个时间单位，则该维修程序在第$s+t-1$个时间单位结束。为了提高仪器使用率，希望安排尽可能短的维修时间。</p></blockquote><h2 id="1-1-算法设计"><a href="#1-1-算法设计" class="headerlink" title="1.1 算法设计:"></a>1.1 算法设计:</h2><p>对于给定的维修程序时间表，计算最优时间表</p><h2 id="1-2-数据输入"><a href="#1-2-数据输入" class="headerlink" title="1.2 数据输入:"></a>1.2 数据输入:</h2><p>由文件<code>input.txt</code>给出输入数据.第一行有 2 个正整数 $n$ 和 $k$. $n$表示仪器的工作时间单位，$k$ 是维修程序数。在接下来的 $k$ 行中,每行有 2 个表示维修程序的整数 $s$ 和 $t$,该维修程序从 $s$ 个时间开始,持续 $t$ 个时间单位.</p><h2 id="1-3-结果输出"><a href="#1-3-结果输出" class="headerlink" title="1.3 结果输出:"></a>1.3 结果输出:</h2><p>将计算出的最短维修时间输出到文件 <code>output.txt</code>.</p><table><thead><tr><th align="center">输入文件实例 input.txt</th><th align="center">输出文件实例 output.txt</th></tr></thead><tbody><tr><td align="center">15 6<br></td><td align="center">11</td></tr><tr><td align="center">1 2<br></td><td align="center"></td></tr><tr><td align="center">1 6<br></td><td align="center"></td></tr><tr><td align="center">4 11<br></td><td align="center"></td></tr><tr><td align="center">8 5<br></td><td align="center"></td></tr><tr><td align="center">8 1<br></td><td align="center"></td></tr><tr><td align="center">11 5<br></td><td align="center"></td></tr></tbody></table><h1 id="2-问题分析"><a href="#2-问题分析" class="headerlink" title="2. 问题分析"></a>2. 问题分析</h1><p>由于机器干活时，是遇到活必干，同一时间遇到多个时可以挑选，在干一个活的期间就不能管其他的活了。<br>设s[i]数组表示在i时间到最大时间n的最短维修时间，那么当i=n+1时，就什么都干不了，最短维修时间为n.当i=a[j]（当前时间刚好与某项任务的开始时间相等）时，那么s[i]表示从这一项任务开始干，干到结束的时间。所以当i=1的时候就是我们要求的原问题：从第1项活开始的最短维修时间，也就是说前面的可以分解为从它的子问题到n的最短维修时间。子问题具有最优子结构。</p><p>可以写出它的<strong>状态转移方程</strong></p><p>当i时间遇到任务时：  $ s[i] = min(s[i],s[i+last[j]]) $<br>当i时间没有任务时：  $ s[i] = s[i+1] – 1 $<br>初值：             $ s[i] = s[i+1] - 1 $</p><h1 id="3-算法实现"><a href="#3-算法实现" class="headerlink" title="3. 算法实现:"></a>3. 算法实现:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># * s[i]表示第i个时间开始到第maxTime个时间单位结束的最短维修时间</span></span><br><span class="line"><span class="comment"># * 参数 start: 每个任务开始的数组 last: 每项任务的持续时间</span></span><br><span class="line"><span class="comment"># *  maxTime: 规定的机器工作时间 workNum: 工作的数量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(start, last, maxTime, workNum)</span>:</span></span><br><span class="line">    s = []</span><br><span class="line">    MAX = float(<span class="string">'inf'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(maxTime + <span class="number">1</span>):</span><br><span class="line">        s.append(MAX)</span><br><span class="line">    s.append(maxTime)  <span class="comment"># 初值</span></span><br><span class="line">    STime = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(maxTime, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        count = <span class="number">0</span>  <span class="comment"># 记录i时间是否有维修程序</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, workNum + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> start[j] == i:  <span class="comment"># 当第i个时间单位有多个维修程序时:</span></span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                s[i] = min(s[i], s[i + last[j]])</span><br><span class="line">        <span class="keyword">if</span> count == <span class="number">0</span>:  <span class="comment"># 当第i个时间单位没有维修程序时:</span></span><br><span class="line">            s[i] = s[i + <span class="number">1</span>] - <span class="number">1</span></span><br><span class="line">    ETime = time.time()</span><br><span class="line">    <span class="keyword">return</span> s, ETime - STime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># maxTime = int(input("输入机器最大工作时间: "))</span></span><br><span class="line">    <span class="comment"># workNum = int(input("输入工作的数量:"))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">'----读取文件----'</span>)</span><br><span class="line">        inFile = open(<span class="string">'data.txt'</span>, <span class="string">'r+'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'----读取失败----'</span>)</span><br><span class="line">        print(<span class="string">"Error! :"</span>, e)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'----读取成功----'</span>)</span><br><span class="line">        line = inFile.readline()</span><br><span class="line">        <span class="keyword">while</span> line:</span><br><span class="line">            start = []</span><br><span class="line">            last = []</span><br><span class="line">            maxTime, workNum = map(int, line.split())</span><br><span class="line">            <span class="comment"># // print(maxTime, workNum)</span></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">0</span>, workNum):</span><br><span class="line">                line = inFile.readline()</span><br><span class="line">                s, t = map(int, line.split())</span><br><span class="line">                start.append(s)</span><br><span class="line">                last.append(t)</span><br><span class="line">            start.insert(<span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 补充列表[0]位</span></span><br><span class="line">            last.insert(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="comment"># // print(start, last)</span></span><br><span class="line">            s,runTime = work(start, last, maxTime, workNum)</span><br><span class="line">            print(<span class="string">"最小修理时间为:"</span>, s[<span class="number">1</span>])</span><br><span class="line">            print(<span class="string">"本次程序运行时间为: %10.7f sec"</span> % runTime)</span><br><span class="line">            line = inFile.readline()</span><br><span class="line">            <span class="keyword">while</span> line == <span class="string">'\n'</span>:</span><br><span class="line">                line = inFile.readline()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        inFile.close()</span><br><span class="line">        print(<span class="string">'----运行完成----'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="4-算法时间复杂度分析"><a href="#4-算法时间复杂度分析" class="headerlink" title="4. 算法时间复杂度分析"></a>4. 算法时间复杂度分析</h1><p>由算法可知，最优时间表问题的时间复杂度与输入的机器工作时间maxTime有关，也与工作数量workNum有关<br>于是可以先固定机器工作时间maxTime，使workNum变化，研究workNum与runtime的关系<br>再固定workTime，使maxTime进行变化，研究maxTime与runtime的关系.</p><p>数据设计的规模如下:</p><h2 id="最优时间表问题"><a href="#最优时间表问题" class="headerlink" title="最优时间表问题"></a><center>最优时间表问题</center></h2><h3 id="表一-控制-maxTime-不变-研究-workTime-和-运行时间的关系"><a href="#表一-控制-maxTime-不变-研究-workTime-和-运行时间的关系" class="headerlink" title="表一: 控制 maxTime 不变,研究 workTime 和 运行时间的关系"></a>表一: 控制 maxTime 不变,研究 workTime 和 运行时间的关系</h3><table><thead><tr><th align="center">机器工作时间 maxTime</th><th align="center">工作数量 workTime</th><th align="center">运行时间($s$)</th></tr></thead><tbody><tr><td align="center">15</td><td align="center">6</td><td align="center">0.0000160</td></tr><tr><td align="center">15</td><td align="center">12</td><td align="center">0.0000422</td></tr><tr><td align="center">15</td><td align="center">50</td><td align="center">0.0000563</td></tr><tr><td align="center">15</td><td align="center">100</td><td align="center">0.0001812</td></tr><tr><td align="center">15</td><td align="center">250</td><td align="center">0.0002391</td></tr><tr><td align="center">15</td><td align="center">500</td><td align="center">0.0008163</td></tr><tr><td align="center">15</td><td align="center">750</td><td align="center">0.0007789</td></tr><tr><td align="center">15</td><td align="center">1000</td><td align="center">0.0011721</td></tr><tr><td align="center">30</td><td align="center">6</td><td align="center">0.0000348</td></tr><tr><td align="center">30</td><td align="center">12</td><td align="center">0.0000358</td></tr><tr><td align="center">30</td><td align="center">50</td><td align="center">0.0001099</td></tr><tr><td align="center">30</td><td align="center">100</td><td align="center">0.0002000</td></tr><tr><td align="center">30</td><td align="center">250</td><td align="center">0.0004299</td></tr><tr><td align="center">30</td><td align="center">500</td><td align="center">0.0010049</td></tr><tr><td align="center">30</td><td align="center">750</td><td align="center">0.0015528</td></tr><tr><td align="center">30</td><td align="center">1000</td><td align="center">0.0020101</td></tr></tbody></table><p>用Numbers作出图像:</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/jzhmcoo1/jzhmcoo1picrepo/raw/master/img/%E8%A1%A81.png" alt="表1"><br><img src= "/img/loading.gif" data-src="https://gitee.com/jzhmcoo1/jzhmcoo1picrepo/raw/master/img/%E8%A1%A83.png" alt="表3"></p><p>可以看出<strong>工作数</strong>对运行时间的影响为<strong>线性的</strong></p><h3 id="表二-控制-workTime-不变-研究-maxTime-和-运行时间的关系"><a href="#表二-控制-workTime-不变-研究-maxTime-和-运行时间的关系" class="headerlink" title="表二: 控制 workTime 不变,研究 maxTime 和 运行时间的关系"></a>表二: 控制 workTime 不变,研究 maxTime 和 运行时间的关系</h3><table><thead><tr><th align="center">机器工作时间 maxTime</th><th align="center">工作数量 workTime</th><th align="center">运行时间($s$)</th></tr></thead><tbody><tr><td align="center">15</td><td align="center">6</td><td align="center">0.0000160</td></tr><tr><td align="center">15</td><td align="center">6</td><td align="center">0.0000160</td></tr><tr><td align="center">30</td><td align="center">6</td><td align="center">0.0000250</td></tr><tr><td align="center">50</td><td align="center">6</td><td align="center">0.0000353</td></tr><tr><td align="center">100</td><td align="center">6</td><td align="center">0.0000689</td></tr><tr><td align="center">250</td><td align="center">6</td><td align="center">0.0001862</td></tr><tr><td align="center">500</td><td align="center">6</td><td align="center">0.0003347</td></tr><tr><td align="center">750</td><td align="center">6</td><td align="center">0.0005631</td></tr><tr><td align="center">1000</td><td align="center">6</td><td align="center">0.0006652</td></tr><tr><td align="center">15</td><td align="center">12</td><td align="center">0.0000212</td></tr><tr><td align="center">30</td><td align="center">12</td><td align="center">0.0000322</td></tr><tr><td align="center">50</td><td align="center">12</td><td align="center">0.0000479</td></tr><tr><td align="center">100</td><td align="center">12</td><td align="center">0.0000923</td></tr><tr><td align="center">250</td><td align="center">12</td><td align="center">0.0002229</td></tr><tr><td align="center">500</td><td align="center">12</td><td align="center">0.0004518</td></tr><tr><td align="center">750</td><td align="center">12</td><td align="center">0.0007238</td></tr><tr><td align="center">1000</td><td align="center">12</td><td align="center">0.0010228</td></tr></tbody></table><p>用Numbers作出图像:</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/jzhmcoo1/jzhmcoo1picrepo/raw/master/img/%E8%A1%A82.png" alt="表2"><br><img src= "/img/loading.gif" data-src="https://gitee.com/jzhmcoo1/jzhmcoo1picrepo/raw/master/img/%E8%A1%A84.png" alt="表4"></p><p>可以看出<strong>机器工作时间</strong>对运行时间的影响为<strong>线性的</strong></p><p><strong>综上两个条件</strong><br>可以验证算法的时间复杂度为 <strong>$O(nm)$</strong></p>]]></content>
      
      
      <categories>
          
          <category> Assignment </category>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的and与or</title>
      <link href="/2020/03/11/Python-and-or/"/>
      <url>/2020/03/11/Python-and-or/</url>
      
        <content type="html"><![CDATA[<p>这学期刚跟着网上的MOOC学Python基础, 里面的课后作业有这么一题</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">156</span></span><br><span class="line">ch = <span class="string">'A'</span></span><br><span class="line">y = <span class="number">1</span></span><br><span class="line">print(x &gt;= y <span class="keyword">and</span> ch &lt; <span class="string">'b'</span> <span class="keyword">and</span> y)</span><br></pre></td></tr></table></figure><p>问你输出结果是什么</p><a id="more"></a><p>按照以前学习其他语言的经验, 想都不想就写了个True, 结果错了</p><p>答案是1, 想不通, 逻辑运算符不都返回布尔值么?</p><p>于是上网找解答, 自己也试着举几个例子.</p><h1 id="1-and"><a href="#1-and" class="headerlink" title="1. and"></a>1. and</h1><p>先看几个例子</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">and</span> b</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="keyword">and</span> a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">and</span> b</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="keyword">and</span> a</span><br><span class="line"><span class="string">''</span></span><br></pre></td></tr></table></figure><p>从上面的运行结果可以看出, and运算当左右两边都为真<br>(数值=0, 字符串为空时为假), 是<strong>从左到右</strong>扫描计算式<br>并返回<strong>最后一个</strong>的值.<br>而当计算式中有假值时, 返回<strong>第一个为假</strong>的值</p><p>接下来看三个计算式两个and的情况</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="string">"abc"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">and</span> b <span class="keyword">and</span> c</span><br><span class="line"><span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">and</span> b <span class="keyword">and</span> c</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c <span class="keyword">and</span> b <span class="keyword">and</span> a</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>这样就很清楚了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>and运算符从左到右扫描, 若全都为真, 返回<strong>最后一个</strong>表达式的值</li><li>若有一个为假, 则返回<strong>第一个为假</strong>的表达式的值</li></ul><h1 id="2-or"><a href="#2-or" class="headerlink" title="2. or"></a>2. or</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">or</span> b</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="keyword">or</span> a</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">or</span> b</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">or</span> b</span><br><span class="line"><span class="string">''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">or</span> b <span class="keyword">or</span> c</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul><li>or运算符从左到右扫描, 返回<strong>第一个为真</strong>的值, 若全部为假, 则返回<strong>最后一个假值</strong></li></ul><h1 id="3-组合情况"><a href="#3-组合情况" class="headerlink" title="3.组合情况"></a>3.组合情况</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"abc"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">"123"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">and</span> a <span class="keyword">or</span> b</span><br><span class="line"><span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span> <span class="keyword">and</span> a <span class="keyword">or</span> b</span><br><span class="line"><span class="string">'123'</span></span><br></pre></td></tr></table></figure><p>对于<code>1 and a or b</code><br>由于and运算优先级高, 先计算and部分, and返回最后一个真值, 则<code>1 and a</code>计算结果为a, 再计算<code>a or b</code> or 返回第一个真值, 于是结果为<code>&#39;abc&#39;</code></p><p>对于<code>0 and a or b</code><br>先计算and, 返回0, <code>0 or b</code>, b不为假,返回b,于是输出结果为<code>123</code></p><blockquote><p>参考:<a href="https://blog.csdn.net/BetaBin/article/details/8568804" target="_blank" rel="noopener">Python：and和or的特殊性质</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> StudyNotes </category>
          
          <category> Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> syntax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的Markdown语法总结</title>
      <link href="/2020/03/10/Simple-Markdown-Syntax/"/>
      <url>/2020/03/10/Simple-Markdown-Syntax/</url>
      
        <content type="html"><![CDATA[<h1 id="1-写在前面"><a href="#1-写在前面" class="headerlink" title="1. 写在前面"></a>1. 写在前面</h1><p>刚开始写博, 对md的语法还不熟悉, 决定先整理一下md的<strong>basic syntax</strong>.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.markdownguide.org/basic-syntax/" target="_blank" rel="noopener">markdownguide.org</a></p></blockquote><a id="more"></a><h1 id="2-文章标题Headings"><a href="#2-文章标题Headings" class="headerlink" title="2. 文章标题Headings"></a>2. 文章标题Headings</h1><p>创建标题只需要使用’#’, 使用几个’#’就对应了几级标题.</p><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section"># heading level1</span></span><br><span class="line"><span class="section">## heading level2</span></span><br><span class="line"><span class="section">### heading level3</span></span><br><span class="line"><span class="section">#### heading level4</span></span><br><span class="line"><span class="section">##### heading level5</span></span><br><span class="line"><span class="section">###### heading level6</span></span><br></pre></td></tr></table></figure><br><p>效果如下:<img src= "/img/loading.gif" data-src="https://gitee.com/jzhmcoo1/jzhmcoo1picrepo/raw/master/img/headings.png" alt="headings"></p><h1 id="3-文章段落-Paragraphs"><a href="#3-文章段落-Paragraphs" class="headerlink" title="3. 文章段落 Paragraphs"></a>3. 文章段落 Paragraphs</h1><p>要创建段落,使用空白行分隔一行或多行文本</p><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">I really like using Markdown.</span><br><span class="line"></span><br><span class="line">I think I'll use it to write my blog online.</span><br></pre></td></tr></table></figure><br><p>效果如下:</p><p>I really like using Markdown.</p><p>I think I’ll use it to write blogs online.</p><h1 id="4-换行-Line-Breaks"><a href="#4-换行-Line-Breaks" class="headerlink" title="4. 换行 Line Breaks"></a>4. 换行 Line Breaks</h1><p>换行时,在行位打<strong>两个或以上</strong>的空格符,然后按下回车.   </p><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--请注意区别--&gt;</span></span></span><br><span class="line">1.This is the first line.      <span class="xml"><span class="comment">&lt;!--此处行末有多个空格&gt;</span></span></span><br><span class="line">And this is the second line.</span><br><span class="line"></span><br><span class="line">2.This is the first line.<span class="xml"><span class="comment">&lt;!--此处行末无空格&gt;</span></span></span><br><span class="line">And this is still at the first line.</span><br><span class="line"></span><br><span class="line">3.This is the first line. <span class="xml"><span class="comment">&lt;!--此处行末有一个空格&gt;</span></span></span><br><span class="line">And this is also at the first line.</span><br></pre></td></tr></table></figure><p>效果如下:<br>1.This is the first line.<br>And this is the second line.</p><p>2.This is the first line.And this is still at the first line.</p><p>3.This is the first line.And this is also at the first line.</p><blockquote><p>这里在博客的实际输出效果可能不一样, 与config文件中marked.gfm属性有关<br>详见<a href="https://github.com/hexojs/hexo/issues/2200" target="_blank" rel="noopener">Github/hexojs/hexo/Issue#2200</a></p></blockquote><h1 id="5-强调-Emphasis"><a href="#5-强调-Emphasis" class="headerlink" title="5. 强调 Emphasis"></a>5. 强调 Emphasis</h1><p>为了强调文本,可以使用加粗/斜体</p><p>加粗为      <code>**想要加粗的内容**</code><br>斜体为      <code>*想要斜体的内容*</code><br>粗体+斜体为  <code>***内容***</code>   </p><p>效果如下:    </p><p><strong>Bold Text</strong></p><p><em>Italic Text</em></p><p><strong><em>Both</em></strong>   </p><blockquote><p><a href="https://www.markdownguide.org/basic-syntax/#emphasis" target="_blank" rel="noopener">参考文档</a> 上不推荐使用下划线的方式, 这里就不整理进去了.</p></blockquote><h1 id="6-块引用-Blockquotes"><a href="#6-块引用-Blockquotes" class="headerlink" title="6. 块引用 Blockquotes"></a>6. 块引用 Blockquotes</h1><h2 id="6-1-块引用"><a href="#6-1-块引用" class="headerlink" title="6.1 块引用"></a>6.1 块引用</h2><p>在行首使用 <code>&gt;</code> 符号进行块引用</p><p><code>&gt; 这是引用,效果看上去是这样子的.</code></p><p>效果如下</p><blockquote><p>这是引用, 效果看上去是这样子的.</p></blockquote><h2 id="6-2-多行块引用-Blockqutos-with-Multiple-Paragrapgs"><a href="#6-2-多行块引用-Blockqutos-with-Multiple-Paragrapgs" class="headerlink" title="6.2 多行块引用 Blockqutos with Multiple Paragrapgs"></a>6.2 多行块引用 Blockqutos with Multiple Paragrapgs</h2><p>只需要在每行开头使用 <code>&gt;</code> </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;块</span><br><span class="line">&gt;引</span><br><span class="line">&gt;用</span><br></pre></td></tr></table></figure><blockquote><p>块<br>引<br>用    </p></blockquote><h2 id="6-3-嵌套块引用-Nested-Blockquotes"><a href="#6-3-嵌套块引用-Nested-Blockquotes" class="headerlink" title="6.3 嵌套块引用 Nested Blockquotes"></a>6.3 嵌套块引用 Nested Blockquotes</h2><p>使用多个 <code>&gt;</code> 来实现嵌套引用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;这</span><br><span class="line">&gt;&gt;是</span><br><span class="line">&gt;&gt;&gt;嵌套</span><br><span class="line">&gt;&gt;&gt;&gt;引用</span><br></pre></td></tr></table></figure><blockquote><p>这</p><blockquote><p>是</p><blockquote><p>嵌套</p><blockquote><p>引用</p></blockquote></blockquote></blockquote></blockquote><h2 id="6-4-引用中嵌套其他md元素"><a href="#6-4-引用中嵌套其他md元素" class="headerlink" title="6.4 引用中嵌套其他md元素"></a>6.4 引用中嵌套其他md元素</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; #### The quarterly results look great!</span><br><span class="line">&gt;</span><br><span class="line">&gt; - Revenue was off the chart.</span><br><span class="line">&gt; - Profits were higher than ever.</span><br><span class="line">&gt;</span><br><span class="line">&gt;  *Everything* is going according to **plan**.</span><br></pre></td></tr></table></figure><blockquote><h4 id="The-quarterly-results-look-great"><a href="#The-quarterly-results-look-great" class="headerlink" title="The quarterly results look great!"></a>The quarterly results look great!</h4><ul><li><p>Revenue was off the chart.</p></li><li><p>Profits were higher than ever.</p><p><em>Everything</em> is going according to <strong>plan</strong>.</p></li></ul></blockquote><h1 id="7-列表-Lists"><a href="#7-列表-Lists" class="headerlink" title="7. 列表 Lists"></a>7. 列表 Lists</h1><p>用来组织一系列项目,可以是有序/无序的</p><h2 id="7-1-有序列表-Ordered-List"><a href="#7-1-有序列表-Ordered-List" class="headerlink" title="7.1 有序列表 Ordered List"></a>7.1 有序列表 Ordered List</h2><p>直接使用 <code>&lt;数字&gt; + &lt;.&gt; + &lt;物品&gt;</code> 的形式</p><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>first item</span><br><span class="line"><span class="bullet">2. </span>seconde item</span><br><span class="line"><span class="bullet">3. </span>third item</span><br></pre></td></tr></table></figure><p>效果如下:</p><ol><li>first item</li><li>seconde item</li><li>third item</li></ol><p>神奇的是,你xjb编号,实际的效果序号还是正确的<br>但要注意列表的开头一项必须为<code>1.</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. first</span><br><span class="line">8. eighth</span><br><span class="line">4. fourth</span><br></pre></td></tr></table></figure><p>效果如下:</p><ol><li>first</li><li>eighth</li><li>fourth</li></ol><p>列表中还能嵌套子列表</p><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>first</span><br><span class="line"><span class="bullet">2. </span>second</span><br><span class="line"><span class="bullet">    - </span>hhh</span><br><span class="line"><span class="bullet">    - </span>233</span><br></pre></td></tr></table></figure><ol><li>first</li><li>second<ul><li>hhh</li><li>233</li></ul></li></ol><h2 id="7-2-无序列表-Unordered-Lists"><a href="#7-2-无序列表-Unordered-Lists" class="headerlink" title="7.2 无序列表 Unordered Lists"></a>7.2 无序列表 Unordered Lists</h2><p>项目名称前面可以使用 <code>-</code>,<code>*</code>,<code>+</code> 效果都是一样的,并且和有序列表一样也能嵌套</p><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>first item</span><br><span class="line"><span class="bullet">+ </span>second item</span><br><span class="line"><span class="bullet">- </span>third item</span><br><span class="line"><span class="bullet">* </span>fourth item</span><br><span class="line"><span class="bullet">    - </span>indented item</span><br><span class="line"><span class="bullet">    - </span>indented item</span><br></pre></td></tr></table></figure><ul><li>first item</li></ul><ul><li>second item</li></ul><ul><li>third item</li></ul><ul><li>fourth item<ul><li>indented item</li><li>indented item</li></ul></li></ul><h2 id="7-3-在列表中添加其他元素-Adding-Elements-in-Lists"><a href="#7-3-在列表中添加其他元素-Adding-Elements-in-Lists" class="headerlink" title="7.3 在列表中添加其他元素 Adding Elements in Lists"></a>7.3 在列表中添加其他元素 Adding Elements in Lists</h2><p>添加元素时,为了保证列表还是延续的, 需要在元素前添加4个空格或者1个tab</p><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-  </span>This is the first list item.      </span><br><span class="line"><span class="bullet">-  </span>Here's the second list item.</span><br><span class="line"></span><br><span class="line"><span class="code">    I need to add another paragraph below the second list item</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-  </span>And here's the third list item.</span><br></pre></td></tr></table></figure><ul><li><p>This is the first list item.      </p></li><li><p>Here’s the second list item.           </p><p> I need to add another paragraph below the second list item</p></li><li><p>And here’s the third list item.</p></li></ul><p>需要注意的是,在列表中嵌入<strong>代码块</strong>,需要比平常多4个空格,也就是8个空格</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.  Open the file.</span><br><span class="line">2.  Find the following code block on line 21:</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">3.  Update the title to match the name of your website.</span><br></pre></td></tr></table></figure><p>效果如下:</p><ol><li><p>Open the file.</p></li><li><p>Find the following code block on line 21:</p><pre><code>&lt;html&gt;    &lt;head&gt;    &lt;title&gt;Test&lt;/title&gt;    &lt;/head&gt;&lt;/html&gt;</code></pre></li><li><p>Update the title to match the name of your website.</p></li></ol><h1 id="8-代码-Code"><a href="#8-代码-Code" class="headerlink" title="8. 代码 Code"></a>8. 代码 Code</h1><h2 id="8-1-单行代码"><a href="#8-1-单行代码" class="headerlink" title="8.1 单行代码"></a>8.1 单行代码</h2><p>用一对反单引号把文本包含起来(`)</p><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="code">`x = x + 1`</span></span><br></pre></td></tr></table></figure><p>效果如下:</p><p><code>x = x + 1</code></p><h2 id="8-2-多行代码"><a href="#8-2-多行代码" class="headerlink" title="8.2 多行代码"></a>8.2 多行代码</h2><p>使用三个(`)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&#96;&#96;&#96;)python &lt;!--实际使用中不需要括号&gt;</span><br><span class="line"># print Hello World!</span><br><span class="line">print(&quot;Hello, World!&quot;)</span><br><span class="line">(&#96;&#96;&#96;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print Hello World!</span></span><br><span class="line">print(<span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></table></figure><h2 id="8-3-反引号转意"><a href="#8-3-反引号转意" class="headerlink" title="8.3 反引号转意"></a>8.3 反引号转意</h2><p>要表示带有<code>``的文本,将一对(``)</code>括在文本的外面<br>比如:<br><code>use `code` in your markdown file.</code></p><p>此处code带有一对反斜杠</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;use &#96;code&#96; in your markdown file.&#96;&#96;</span><br><span class="line">&lt;!-- 只需将两个&#96;&#96;括在文本外面 --&gt;</span><br></pre></td></tr></table></figure><p>效果如下:<br><code>use `code` in your markdown file.</code></p><!-- 只需将两个``括在文本外面 --><h1 id="9-横向分隔线"><a href="#9-横向分隔线" class="headerlink" title="9. 横向分隔线"></a>9. 横向分隔线</h1><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 三个或多个星号* --&gt;</span></span></span><br><span class="line"><span class="emphasis">***</span> </span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 三个或多个短横- --&gt;</span></span></span><br><span class="line">---</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 三个或多个下划线_ --&gt;</span></span></span><br><span class="line"><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span>__</span><br></pre></td></tr></table></figure><p>效果如下</p><hr><hr><hr><hr><h1 id="10-超链接"><a href="#10-超链接" class="headerlink" title="10. 超链接"></a>10. 超链接</h1><h2 id="10-1-贴个链接"><a href="#10-1-贴个链接" class="headerlink" title="10.1 贴个链接"></a>10.1 贴个链接</h2><p><code>[link text](url)</code></p><p>比如<br><code>My Favorite search engine is [Duck Duck Go](https://duckduckgo.com)</code></p><p>效果如下:<br>My Favorite search engine is <a href="https://duckduckgo.com" target="_blank" rel="noopener">Duck Duck Go</a></p><h2 id="10-2-快速链接"><a href="#10-2-快速链接" class="headerlink" title="10.2 快速链接"></a>10.2 快速链接</h2><p>使用<code>&lt;&gt;</code>将链接包围,不需要写描述文本了</p><p><code>&lt;https://www.markdownguide.org&gt;</code></p><p>效果如下:<br><a href="https://www.markdownguide.org" target="_blank" rel="noopener">https://www.markdownguide.org</a></p><h2 id="10-3-参考样式链接"><a href="#10-3-参考样式链接" class="headerlink" title="10.3 参考样式链接"></a>10.3 参考样式链接</h2><p>和引用论文差不多</p><p><code>[Link Text][number]</code><br><code>再写上[number]对应的链接 &lt;url&gt;</code></p><p>比如:    </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 第一部分 --&gt;</span><br><span class="line">[DuckDuckGo][1]</span><br><span class="line">[百度][2]</span><br><span class="line"></span><br><span class="line">&lt;!-- 第二部分 --&gt;</span><br><span class="line">[1]:&lt;https:&#x2F;&#x2F;duckduckgo.com&gt;</span><br><span class="line">[2]:http:&#x2F;&#x2F;www.baidu.com</span><br></pre></td></tr></table></figure><p>效果如下:</p><p><a href="https://duckduckgo.com" target="_blank" rel="noopener">DuckDuckGo</a>     </p><p><a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a>    </p><blockquote><p>You can place this second part of the link anywhere in your Markdown document. Some people place them immediately after the paragraph in which they appear while other people place them at the end of the document (like endnotes or footnotes).<br>引用自<a href="https://www.markdownguide.org/basic-syntax/#horizontal-rules" target="_blank" rel="noopener">markdownguide.org</a></p></blockquote><p>这个参考式链接的第二部分可以出现在md文件的任何地方</p><hr><h1 id="11-插入图片"><a href="#11-插入图片" class="headerlink" title="11. 插入图片"></a>11. 插入图片</h1><p><code>![对图片的描述文字](url 给图片加个title(可选))</code></p><p>比如:<br>插一张我的头像</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![myavatar](&#x2F;img&#x2F;avatar.jpeg &quot;杰尼龟🐛啊&quot;)</span><br></pre></td></tr></table></figure><p>效果如下:<br><img src= "/img/loading.gif" data-src="https://gitee.com/jzhmcoo1/jzhmcoo1picrepo/raw/master/img/avatar.jpeg" alt=""></p><hr><h1 id="12-写在最后"><a href="#12-写在最后" class="headerlink" title="12. 写在最后"></a>12. 写在最后</h1><p>第一次写博文. 👶👶👶<br>写这篇博是想学习Basic Syntax, 在博客中常用的md语法.<br>总结的不是很全面, 加入了自己的理解, 与官方文档有所偏差.<br>以后有需要的话可能会再出一篇Extended Synatx(官方说法)<br>hexo和我的vscode预览的效果有些差异, 没有时间去一个个解决,有点遗憾.<br>如果这篇文章能够帮助到你那就再好不过了.</p>]]></content>
      
      
      <categories>
          
          <category> StudyNotes </category>
          
          <category> Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> syntax </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
